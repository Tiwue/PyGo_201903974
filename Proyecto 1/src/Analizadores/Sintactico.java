
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Produccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.If;
import Estructuras.Instrucciones.While;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.Declaracion;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Switch;
import Estructuras.Instrucciones.Case;
import Estructuras.Instrucciones.Main;
import Estructuras.Instrucciones.For;
import Estructuras.Instrucciones.DoWhile;
import Estructuras.Instrucciones.Return;
import Estructuras.Instrucciones.Metodo;
import Estructuras.Instrucciones.Parametro;
import Estructuras.Instrucciones.Funcion;
import Estructuras.Instrucciones.Impresion;
import Estructuras.Instrucciones.Llamada;
import java.util.LinkedList;
import Estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\003\000\002" +
    "\020\003\000\002\020\004\000\002\020\004\000\002\006" +
    "\007\000\002\006\011\000\002\006\011\000\002\006\011" +
    "\000\002\006\011\000\002\006\011\000\002\006\006\000" +
    "\002\006\013\000\002\006\012\000\002\006\016\000\002" +
    "\006\015\000\002\006\007\000\002\006\006\000\002\006" +
    "\006\000\002\006\005\000\002\006\003\000\002\006\006" +
    "\000\002\006\012\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\006\007\000\002\006\007\000\002" +
    "\006\013\000\002\006\013\000\002\006\013\000\002\006" +
    "\013\000\002\006\013\000\002\006\007\000\002\006\010" +
    "\000\002\006\005\000\002\006\005\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\006\000\002" +
    "\017\006\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\015\007" +
    "\000\002\015\010\000\002\015\011\000\002\015\007\000" +
    "\002\015\012\000\002\012\010\000\002\012\007\000\002" +
    "\013\005\000\002\013\003\000\002\016\005\000\002\016" +
    "\005\000\002\011\007\000\002\011\006\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\007" +
    "\004\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\010" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\006\003\005\040\007\001\002\000\004\002" +
    "\u010c\001\002\000\004\040\007\001\002\000\006\002\ufffe" +
    "\040\ufffe\001\002\000\036\003\024\042\014\045\030\065" +
    "\020\070\027\071\012\076\031\101\033\107\015\112\026" +
    "\115\032\117\021\120\025\121\017\001\002\000\006\002" +
    "\000\040\007\001\002\000\006\002\uffff\040\uffff\001\002" +
    "\000\026\005\046\014\042\022\035\045\047\054\037\055" +
    "\050\056\041\060\036\061\040\062\034\001\002\000\036" +
    "\041\366\042\014\045\030\065\020\070\027\071\012\076" +
    "\031\101\033\107\015\112\026\115\032\117\021\120\025" +
    "\121\017\001\002\000\004\045\030\001\002\000\040\003" +
    "\024\042\014\045\030\065\020\070\027\071\012\076\031" +
    "\101\033\107\015\110\334\112\026\115\032\117\021\120" +
    "\025\121\017\001\002\000\064\017\uffe3\041\uffe3\042\uffe3" +
    "\045\uffe3\065\uffe3\070\uffe3\071\uffe3\073\uffe3\074\uffe3\075" +
    "\uffe3\076\uffe3\100\uffe3\101\uffe3\103\uffe3\106\uffe3\107\uffe3" +
    "\110\uffe3\111\uffe3\112\uffe3\113\uffe3\115\uffe3\116\uffe3\117" +
    "\uffe3\120\uffe3\121\uffe3\001\002\000\026\005\046\014\042" +
    "\022\035\045\047\054\037\055\050\056\041\060\036\061" +
    "\040\062\034\001\002\000\004\007\325\001\002\000\004" +
    "\057\316\001\002\000\060\017\ufffa\041\ufffa\042\ufffa\045" +
    "\ufffa\065\ufffa\070\ufffa\071\ufffa\073\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\100\ufffa\101\ufffa\103\ufffa\106\ufffa\107\ufffa\110" +
    "\ufffa\112\ufffa\113\ufffa\115\ufffa\117\ufffa\120\ufffa\121\ufffa" +
    "\001\002\000\006\015\311\053\312\001\002\000\034\042" +
    "\014\045\030\065\020\070\027\071\012\076\031\101\033" +
    "\107\015\112\026\115\032\117\021\120\025\121\017\001" +
    "\002\000\026\005\046\014\042\022\035\045\047\054\037" +
    "\055\050\056\041\060\036\061\040\062\034\001\002\000" +
    "\004\057\275\001\002\000\026\005\046\014\042\022\035" +
    "\045\047\054\037\055\050\056\041\060\036\061\040\062" +
    "\034\001\002\000\012\006\uffc0\015\uffc0\043\uffc0\053\uffc0" +
    "\001\002\000\026\005\046\014\042\022\035\045\047\054" +
    "\037\055\050\056\041\060\036\061\040\062\034\001\002" +
    "\000\004\057\137\001\002\000\026\005\046\014\042\022" +
    "\035\045\047\054\037\055\050\056\041\060\036\061\040" +
    "\062\034\001\002\000\160\003\uffa4\004\uffa4\006\uffa4\010" +
    "\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\041\uffa4\042\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\065\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4" +
    "\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103" +
    "\uffa4\104\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\112\uffa4" +
    "\113\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4\001" +
    "\002\000\026\005\046\014\042\022\035\045\047\054\037" +
    "\055\050\056\041\060\036\061\040\062\034\001\002\000" +
    "\160\003\uffa8\004\uffa8\006\uffa8\010\uffa8\017\uffa8\020\uffa8" +
    "\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\041\uffa8\042\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\065\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\106\uffa8" +
    "\107\uffa8\110\uffa8\111\uffa8\112\uffa8\113\uffa8\115\uffa8\116" +
    "\uffa8\117\uffa8\120\uffa8\121\uffa8\001\002\000\160\003\uffa5" +
    "\004\uffa5\006\uffa5\010\uffa5\017\uffa5\020\uffa5\021\uffa5\022" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\030\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\041\uffa5\042\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\065\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100\uffa5" +
    "\101\uffa5\102\uffa5\103\uffa5\104\uffa5\106\uffa5\107\uffa5\110" +
    "\uffa5\111\uffa5\112\uffa5\113\uffa5\115\uffa5\116\uffa5\117\uffa5" +
    "\120\uffa5\121\uffa5\001\002\000\160\003\uffa7\004\uffa7\006" +
    "\uffa7\010\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7" +
    "\042\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\065\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7" +
    "\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102" +
    "\uffa7\103\uffa7\104\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7" +
    "\112\uffa7\113\uffa7\115\uffa7\116\uffa7\117\uffa7\120\uffa7\121" +
    "\uffa7\001\002\000\160\003\uffa3\004\uffa3\006\uffa3\010\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\041\uffa3\042\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\065\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3" +
    "\104\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113" +
    "\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3\121\uffa3\001\002" +
    "\000\004\013\131\001\002\000\160\003\uffa9\004\uffa9\006" +
    "\uffa9\010\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\041\uffa9" +
    "\042\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\065\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9" +
    "\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102" +
    "\uffa9\103\uffa9\104\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9" +
    "\112\uffa9\113\uffa9\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121" +
    "\uffa9\001\002\000\042\021\057\022\052\023\053\024\055" +
    "\025\061\026\067\027\066\030\056\031\071\032\063\033" +
    "\070\034\062\035\065\036\060\037\054\053\111\001\002" +
    "\000\160\003\uffb2\004\uffb2\006\uffb2\010\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\041\uffb2\042\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\065\uffb2\070" +
    "\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\106" +
    "\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2\115\uffb2" +
    "\116\uffb2\117\uffb2\120\uffb2\121\uffb2\001\002\000\026\005" +
    "\046\014\042\022\035\045\047\054\037\055\050\056\041" +
    "\060\036\061\040\062\034\001\002\000\160\003\uffa6\004" +
    "\uffa6\006\uffa6\010\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\041\uffa6\042\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\065\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101" +
    "\uffa6\102\uffa6\103\uffa6\104\uffa6\106\uffa6\107\uffa6\110\uffa6" +
    "\111\uffa6\112\uffa6\113\uffa6\115\uffa6\116\uffa6\117\uffa6\120" +
    "\uffa6\121\uffa6\001\002\000\160\003\uffa2\004\uffa2\006\uffa2" +
    "\010\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\041\uffa2\042" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\065\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074" +
    "\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2" +
    "\103\uffa2\104\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112" +
    "\uffa2\113\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2\121\uffa2" +
    "\001\002\000\042\006\064\021\057\022\052\023\053\024" +
    "\055\025\061\026\067\027\066\030\056\031\071\032\063" +
    "\033\070\034\062\035\065\036\060\037\054\001\002\000" +
    "\026\005\046\014\042\022\035\045\047\054\037\055\050" +
    "\056\041\060\036\061\040\062\034\001\002\000\026\005" +
    "\046\014\042\022\035\045\047\054\037\055\050\056\041" +
    "\060\036\061\040\062\034\001\002\000\026\005\046\014" +
    "\042\022\035\045\047\054\037\055\050\056\041\060\036" +
    "\061\040\062\034\001\002\000\026\005\046\014\042\022" +
    "\035\045\047\054\037\055\050\056\041\060\036\061\040" +
    "\062\034\001\002\000\026\005\046\014\042\022\035\045" +
    "\047\054\037\055\050\056\041\060\036\061\040\062\034" +
    "\001\002\000\026\005\046\014\042\022\035\045\047\054" +
    "\037\055\050\056\041\060\036\061\040\062\034\001\002" +
    "\000\026\005\046\014\042\022\035\045\047\054\037\055" +
    "\050\056\041\060\036\061\040\062\034\001\002\000\026" +
    "\005\046\014\042\022\035\045\047\054\037\055\050\056" +
    "\041\060\036\061\040\062\034\001\002\000\026\005\046" +
    "\014\042\022\035\045\047\054\037\055\050\056\041\060" +
    "\036\061\040\062\034\001\002\000\026\005\046\014\042" +
    "\022\035\045\047\054\037\055\050\056\041\060\036\061" +
    "\040\062\034\001\002\000\160\003\uffaa\004\uffaa\006\uffaa" +
    "\010\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\041\uffaa\042" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\065\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa" +
    "\103\uffaa\104\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\112" +
    "\uffaa\113\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa\121\uffaa" +
    "\001\002\000\026\005\046\014\042\022\035\045\047\054" +
    "\037\055\050\056\041\060\036\061\040\062\034\001\002" +
    "\000\026\005\046\014\042\022\035\045\047\054\037\055" +
    "\050\056\041\060\036\061\040\062\034\001\002\000\026" +
    "\005\046\014\042\022\035\045\047\054\037\055\050\056" +
    "\041\060\036\061\040\062\034\001\002\000\026\005\046" +
    "\014\042\022\035\045\047\054\037\055\050\056\041\060" +
    "\036\061\040\062\034\001\002\000\026\005\046\014\042" +
    "\022\035\045\047\054\037\055\050\056\041\060\036\061" +
    "\040\062\034\001\002\000\160\003\uffb9\004\uffb9\006\uffb9" +
    "\010\uffb9\017\uffb9\020\uffb9\021\057\022\052\023\053\024" +
    "\055\025\061\026\067\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\041\uffb9\042" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\065\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074" +
    "\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9" +
    "\103\uffb9\104\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112" +
    "\uffb9\113\uffb9\115\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9" +
    "\001\002\000\160\003\uffb7\004\uffb7\006\uffb7\010\uffb7\017" +
    "\uffb7\020\uffb7\021\057\022\052\023\053\024\055\025\061" +
    "\026\067\027\066\030\056\031\071\032\063\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\045\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\065" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7" +
    "\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104" +
    "\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112\uffb7\113\uffb7" +
    "\115\uffb7\116\uffb7\117\uffb7\120\uffb7\121\uffb7\001\002\000" +
    "\160\003\uffab\004\uffab\006\uffab\010\uffab\017\uffab\020\uffab" +
    "\021\uffab\022\uffab\023\uffab\024\uffab\025\061\026\uffab\027" +
    "\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\041\uffab\042\uffab\045\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\065\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\106\uffab" +
    "\107\uffab\110\uffab\111\uffab\112\uffab\113\uffab\115\uffab\116" +
    "\uffab\117\uffab\120\uffab\121\uffab\001\002\000\160\003\uffbb" +
    "\004\uffbb\006\uffbb\010\uffbb\017\uffbb\020\uffbb\021\057\022" +
    "\052\023\053\024\055\025\061\026\067\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\041\uffbb\042\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\053\uffbb\065\uffbb\070\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb" +
    "\101\uffbb\102\uffbb\103\uffbb\104\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\111\uffbb\112\uffbb\113\uffbb\115\uffbb\116\uffbb\117\uffbb" +
    "\120\uffbb\121\uffbb\001\002\000\160\003\uffb4\004\uffb4\006" +
    "\uffb4\010\uffb4\017\uffb4\020\uffb4\021\057\022\052\023\053" +
    "\024\055\025\061\026\067\027\066\030\056\031\071\032" +
    "\063\033\070\034\062\035\uffb4\036\060\037\054\041\uffb4" +
    "\042\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\065\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102" +
    "\uffb4\103\uffb4\104\uffb4\106\uffb4\107\uffb4\110\uffb4\111\uffb4" +
    "\112\uffb4\113\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\121" +
    "\uffb4\001\002\000\160\003\uffb8\004\uffb8\006\uffb8\010\uffb8" +
    "\017\uffb8\020\uffb8\021\057\022\052\023\053\024\055\025" +
    "\061\026\067\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\045" +
    "\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\065\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075" +
    "\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8" +
    "\104\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8\001\002" +
    "\000\160\003\uffb6\004\uffb6\006\uffb6\010\uffb6\017\uffb6\020" +
    "\uffb6\021\057\022\052\023\053\024\055\025\061\026\067" +
    "\027\066\030\056\031\071\032\063\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\041\uffb6\042\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\065\uffb6\070" +
    "\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6" +
    "\077\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\106" +
    "\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6\115\uffb6" +
    "\116\uffb6\117\uffb6\120\uffb6\121\uffb6\001\002\000\160\003" +
    "\uffac\004\uffac\006\uffac\010\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\061\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\041\uffac\042\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\065\uffac\070\uffac\071\uffac" +
    "\072\uffac\073\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100" +
    "\uffac\101\uffac\102\uffac\103\uffac\104\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\113\uffac\115\uffac\116\uffac\117" +
    "\uffac\120\uffac\121\uffac\001\002\000\160\003\uffb5\004\uffb5" +
    "\006\uffb5\010\uffb5\017\uffb5\020\uffb5\021\057\022\052\023" +
    "\053\024\055\025\061\026\067\027\066\030\056\031\071" +
    "\032\063\033\070\034\062\035\uffb5\036\uffb5\037\054\041" +
    "\uffb5\042\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\053\uffb5\065\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5" +
    "\102\uffb5\103\uffb5\104\uffb5\106\uffb5\107\uffb5\110\uffb5\111" +
    "\uffb5\112\uffb5\113\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5" +
    "\121\uffb5\001\002\000\160\003\uffb0\004\uffb0\006\uffb0\010" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\053\024\055" +
    "\025\061\026\067\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\065\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103" +
    "\uffb0\104\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112\uffb0" +
    "\113\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\001" +
    "\002\000\160\003\uffba\004\uffba\006\uffba\010\uffba\017\uffba" +
    "\020\uffba\021\057\022\052\023\053\024\055\025\061\026" +
    "\067\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\041\uffba\042\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\065\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba" +
    "\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\113\uffba\115" +
    "\uffba\116\uffba\117\uffba\120\uffba\121\uffba\001\002\000\160" +
    "\003\uffad\004\uffad\006\uffad\010\uffad\017\uffad\020\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\025\061\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\041\uffad\042\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\065\uffad\070\uffad\071" +
    "\uffad\072\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\106\uffad\107" +
    "\uffad\110\uffad\111\uffad\112\uffad\113\uffad\115\uffad\116\uffad" +
    "\117\uffad\120\uffad\121\uffad\001\002\000\160\003\uffb3\004" +
    "\uffb3\006\uffb3\010\uffb3\017\uffb3\020\uffb3\021\057\022\052" +
    "\023\053\024\055\025\061\026\067\027\066\030\056\031" +
    "\071\032\063\033\070\034\062\035\uffb3\036\uffb3\037\054" +
    "\041\uffb3\042\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\065\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\104\uffb3\106\uffb3\107\uffb3\110\uffb3" +
    "\111\uffb3\112\uffb3\113\uffb3\115\uffb3\116\uffb3\117\uffb3\120" +
    "\uffb3\121\uffb3\001\002\000\160\003\uffae\004\uffae\006\uffae" +
    "\010\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\061\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\041\uffae\042" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\065\uffae\070\uffae\071\uffae\072\uffae\073\uffae\074" +
    "\uffae\075\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae" +
    "\103\uffae\104\uffae\106\uffae\107\uffae\110\uffae\111\uffae\112" +
    "\uffae\113\uffae\115\uffae\116\uffae\117\uffae\120\uffae\121\uffae" +
    "\001\002\000\160\003\uffaf\004\uffaf\006\uffaf\010\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\053\024\055\025\061" +
    "\026\067\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\042\uffaf\045\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\065" +
    "\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf" +
    "\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104" +
    "\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\113\uffaf" +
    "\115\uffaf\116\uffaf\117\uffaf\120\uffaf\121\uffaf\001\002\000" +
    "\026\005\046\014\042\022\035\045\047\054\037\055\050" +
    "\056\041\060\036\061\040\062\034\001\002\000\042\021" +
    "\057\022\052\023\053\024\055\025\061\026\067\027\066" +
    "\030\056\031\071\032\063\033\070\034\062\035\065\036" +
    "\060\037\054\102\113\001\002\000\026\005\046\014\042" +
    "\022\035\045\047\054\037\055\050\056\041\060\036\061" +
    "\040\062\034\001\002\000\044\021\057\022\052\023\053" +
    "\024\055\025\061\026\067\027\066\030\056\031\071\032" +
    "\063\033\070\034\062\035\065\036\060\037\054\077\116" +
    "\104\115\001\002\000\004\105\123\001\002\000\040\003" +
    "\024\042\014\045\030\065\020\070\027\071\012\076\031" +
    "\101\033\103\120\107\015\112\026\115\032\117\021\120" +
    "\025\121\017\001\002\000\036\042\014\045\030\065\020" +
    "\070\027\071\012\076\031\101\033\103\121\107\015\112" +
    "\026\115\032\117\021\120\025\121\017\001\002\000\064" +
    "\017\uffea\041\uffea\042\uffea\045\uffea\065\uffea\070\uffea\071" +
    "\uffea\073\uffea\074\uffea\075\uffea\076\uffea\100\uffea\101\uffea" +
    "\103\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\113" +
    "\uffea\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\001\002" +
    "\000\064\017\uffeb\041\uffeb\042\uffeb\045\uffeb\065\uffeb\070" +
    "\uffeb\071\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\100\uffeb" +
    "\101\uffeb\103\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112" +
    "\uffeb\113\uffeb\115\uffeb\116\uffeb\117\uffeb\120\uffeb\121\uffeb" +
    "\001\002\000\060\017\ufffb\041\ufffb\042\ufffb\045\ufffb\065" +
    "\ufffb\070\ufffb\071\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\100\ufffb\101\ufffb\103\ufffb\106\ufffb\107\ufffb\110\ufffb\112" +
    "\ufffb\113\ufffb\115\ufffb\117\ufffb\120\ufffb\121\ufffb\001\002" +
    "\000\026\005\046\014\042\022\035\045\047\054\037\055" +
    "\050\056\041\060\036\061\040\062\034\001\002\000\042" +
    "\021\057\022\052\023\053\024\055\025\061\026\067\027" +
    "\066\030\056\031\071\032\063\033\070\034\062\035\065" +
    "\036\060\037\054\077\125\001\002\000\040\003\024\042" +
    "\014\045\030\065\020\070\027\071\012\076\031\101\033" +
    "\103\127\107\015\112\026\115\032\117\021\120\025\121" +
    "\017\001\002\000\036\042\014\045\030\065\020\070\027" +
    "\071\012\076\031\101\033\103\130\107\015\112\026\115" +
    "\032\117\021\120\025\121\017\001\002\000\064\017\uffe8" +
    "\041\uffe8\042\uffe8\045\uffe8\065\uffe8\070\uffe8\071\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\076\uffe8\100\uffe8\101\uffe8\103\uffe8" +
    "\106\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\113\uffe8\115" +
    "\uffe8\116\uffe8\117\uffe8\120\uffe8\121\uffe8\001\002\000\064" +
    "\017\uffe9\041\uffe9\042\uffe9\045\uffe9\065\uffe9\070\uffe9\071" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\100\uffe9\101\uffe9" +
    "\103\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\113" +
    "\uffe9\115\uffe9\116\uffe9\117\uffe9\120\uffe9\121\uffe9\001\002" +
    "\000\004\011\132\001\002\000\004\054\133\001\002\000" +
    "\004\012\134\001\002\000\004\014\135\001\002\000\160" +
    "\003\uffa1\004\uffa1\006\uffa1\010\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\041\uffa1\042\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\065\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1\106\uffa1\107" +
    "\uffa1\110\uffa1\111\uffa1\112\uffa1\113\uffa1\115\uffa1\116\uffa1" +
    "\117\uffa1\120\uffa1\121\uffa1\001\002\000\160\003\uffb1\004" +
    "\uffb1\006\uffb1\010\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\041\uffb1\042\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\065\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101" +
    "\uffb1\102\uffb1\103\uffb1\104\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\111\uffb1\112\uffb1\113\uffb1\115\uffb1\116\uffb1\117\uffb1\120" +
    "\uffb1\121\uffb1\001\002\000\014\046\142\047\140\050\141" +
    "\051\143\052\144\001\002\000\042\003\151\042\014\045" +
    "\030\065\020\070\027\071\012\076\031\101\033\107\015" +
    "\111\150\112\026\114\237\115\032\117\021\120\025\121" +
    "\017\001\002\000\042\003\151\042\014\045\030\065\020" +
    "\070\027\071\012\076\031\101\033\107\015\111\150\112" +
    "\026\114\227\115\032\117\021\120\025\121\017\001\002" +
    "\000\042\003\151\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\111\150\112\026\114\217" +
    "\115\032\117\021\120\025\121\017\001\002\000\042\003" +
    "\151\042\014\045\030\065\020\070\027\071\012\076\031" +
    "\101\033\107\015\111\150\112\026\114\207\115\032\117" +
    "\021\120\025\121\017\001\002\000\042\003\151\042\014" +
    "\045\030\065\020\070\027\071\012\076\031\101\033\107" +
    "\015\111\150\112\026\114\152\115\032\117\021\120\025" +
    "\121\017\001\002\000\040\042\014\045\030\065\020\070" +
    "\027\071\012\076\031\101\033\107\015\111\150\112\026" +
    "\115\032\116\205\117\021\120\025\121\017\001\002\000" +
    "\040\042\ufff6\045\ufff6\065\ufff6\070\ufff6\071\ufff6\076\ufff6" +
    "\101\ufff6\107\ufff6\111\ufff6\112\ufff6\115\ufff6\116\ufff6\117" +
    "\ufff6\120\ufff6\121\ufff6\001\002\000\040\042\ufff5\045\ufff5" +
    "\065\ufff5\070\ufff5\071\ufff5\076\ufff5\101\ufff5\107\ufff5\111" +
    "\ufff5\112\ufff5\115\ufff5\116\ufff5\117\ufff5\120\ufff5\121\ufff5" +
    "\001\002\000\032\005\046\014\042\022\035\045\047\054" +
    "\037\055\050\056\041\060\036\061\040\062\034\071\012" +
    "\076\031\001\002\000\036\042\014\045\030\065\020\070" +
    "\027\071\012\076\031\101\033\107\015\111\150\112\026" +
    "\115\032\117\021\120\025\121\017\001\002\000\004\005" +
    "\153\001\002\000\026\005\046\014\042\022\035\045\047" +
    "\054\037\055\050\056\041\060\036\061\040\062\034\001" +
    "\002\000\006\006\164\015\163\001\002\000\052\021\057" +
    "\022\052\023\053\024\055\025\061\026\067\027\066\030" +
    "\056\031\071\032\063\033\070\034\062\035\065\036\060" +
    "\037\054\046\161\047\160\050\162\051\156\052\157\001" +
    "\002\000\006\006\uffca\015\uffca\001\002\000\006\006\uffc9" +
    "\015\uffc9\001\002\000\006\006\uffcc\015\uffcc\001\002\000" +
    "\006\006\uffcd\015\uffcd\001\002\000\006\006\uffcb\015\uffcb" +
    "\001\002\000\026\005\046\014\042\022\035\045\047\054" +
    "\037\055\050\056\041\060\036\061\040\062\034\001\002" +
    "\000\040\003\151\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\111\150\112\026\115\032" +
    "\117\021\120\025\121\017\001\002\000\040\042\014\045" +
    "\030\065\020\070\027\071\012\076\031\101\033\107\015" +
    "\111\150\112\026\115\032\116\167\117\021\120\025\121" +
    "\017\001\002\000\040\042\ufff8\045\ufff8\065\ufff8\070\ufff8" +
    "\071\ufff8\076\ufff8\101\ufff8\107\ufff8\111\ufff8\112\ufff8\115" +
    "\ufff8\116\ufff8\117\ufff8\120\ufff8\121\ufff8\001\002\000\064" +
    "\017\uffd7\041\uffd7\042\uffd7\045\uffd7\065\uffd7\070\uffd7\071" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\100\uffd7\101\uffd7" +
    "\103\uffd7\106\uffd7\107\uffd7\110\uffd7\111\uffd7\112\uffd7\113" +
    "\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\121\uffd7\001\002" +
    "\000\040\042\ufff7\045\ufff7\065\ufff7\070\ufff7\071\ufff7\076" +
    "\ufff7\101\ufff7\107\ufff7\111\ufff7\112\ufff7\115\ufff7\116\ufff7" +
    "\117\ufff7\120\ufff7\121\ufff7\001\002\000\052\021\057\022" +
    "\052\023\053\024\055\025\061\026\067\027\066\030\056" +
    "\031\071\032\063\033\070\034\062\035\065\036\060\037" +
    "\054\046\175\047\174\050\176\051\172\052\173\001\002" +
    "\000\006\006\uffcf\015\uffcf\001\002\000\006\006\uffce\015" +
    "\uffce\001\002\000\006\006\uffd1\015\uffd1\001\002\000\006" +
    "\006\uffd2\015\uffd2\001\002\000\006\006\uffd0\015\uffd0\001" +
    "\002\000\040\042\ufff4\045\ufff4\065\ufff4\070\ufff4\071\ufff4" +
    "\076\ufff4\101\ufff4\107\ufff4\111\ufff4\112\ufff4\115\ufff4\116" +
    "\ufff4\117\ufff4\120\ufff4\121\ufff4\001\002\000\040\042\ufff3" +
    "\045\ufff3\065\ufff3\070\ufff3\071\ufff3\076\ufff3\101\ufff3\107" +
    "\ufff3\111\ufff3\112\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3" +
    "\121\ufff3\001\002\000\042\004\204\021\057\022\052\023" +
    "\053\024\055\025\061\026\067\027\066\030\056\031\071" +
    "\032\063\033\070\034\062\035\065\036\060\037\054\001" +
    "\002\000\004\004\203\001\002\000\040\042\uffbe\045\uffbe" +
    "\065\uffbe\070\uffbe\071\uffbe\076\uffbe\101\uffbe\107\uffbe\111" +
    "\uffbe\112\uffbe\115\uffbe\116\uffbe\117\uffbe\120\uffbe\121\uffbe" +
    "\001\002\000\040\042\uffbf\045\uffbf\065\uffbf\070\uffbf\071" +
    "\uffbf\076\uffbf\101\uffbf\107\uffbf\111\uffbf\112\uffbf\115\uffbf" +
    "\116\uffbf\117\uffbf\120\uffbf\121\uffbf\001\002\000\064\017" +
    "\uffdc\041\uffdc\042\uffdc\045\uffdc\065\uffdc\070\uffdc\071\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\100\uffdc\101\uffdc\103" +
    "\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112\uffdc\113\uffdc" +
    "\115\uffdc\116\uffdc\117\uffdc\120\uffdc\121\uffdc\001\002\000" +
    "\040\042\014\045\030\065\020\070\027\071\012\076\031" +
    "\101\033\107\015\111\150\112\026\115\032\116\215\117" +
    "\021\120\025\121\017\001\002\000\004\005\210\001\002" +
    "\000\026\005\046\014\042\022\035\045\047\054\037\055" +
    "\050\056\041\060\036\061\040\062\034\001\002\000\006" +
    "\006\212\015\163\001\002\000\040\003\151\042\014\045" +
    "\030\065\020\070\027\071\012\076\031\101\033\107\015" +
    "\111\150\112\026\115\032\117\021\120\025\121\017\001" +
    "\002\000\040\042\014\045\030\065\020\070\027\071\012" +
    "\076\031\101\033\107\015\111\150\112\026\115\032\116" +
    "\214\117\021\120\025\121\017\001\002\000\064\017\uffd8" +
    "\041\uffd8\042\uffd8\045\uffd8\065\uffd8\070\uffd8\071\uffd8\073" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\100\uffd8\101\uffd8\103\uffd8" +
    "\106\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8\115" +
    "\uffd8\116\uffd8\117\uffd8\120\uffd8\121\uffd8\001\002\000\064" +
    "\017\uffdd\041\uffdd\042\uffdd\045\uffdd\065\uffdd\070\uffdd\071" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\100\uffdd\101\uffdd" +
    "\103\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113" +
    "\uffdd\115\uffdd\116\uffdd\117\uffdd\120\uffdd\121\uffdd\001\002" +
    "\000\040\042\014\045\030\065\020\070\027\071\012\076" +
    "\031\101\033\107\015\111\150\112\026\115\032\116\225" +
    "\117\021\120\025\121\017\001\002\000\004\005\220\001" +
    "\002\000\026\005\046\014\042\022\035\045\047\054\037" +
    "\055\050\056\041\060\036\061\040\062\034\001\002\000" +
    "\006\006\222\015\163\001\002\000\040\003\151\042\014" +
    "\045\030\065\020\070\027\071\012\076\031\101\033\107" +
    "\015\111\150\112\026\115\032\117\021\120\025\121\017" +
    "\001\002\000\040\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\111\150\112\026\115\032" +
    "\116\224\117\021\120\025\121\017\001\002\000\064\017" +
    "\uffdb\041\uffdb\042\uffdb\045\uffdb\065\uffdb\070\uffdb\071\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\100\uffdb\101\uffdb\103" +
    "\uffdb\106\uffdb\107\uffdb\110\uffdb\111\uffdb\112\uffdb\113\uffdb" +
    "\115\uffdb\116\uffdb\117\uffdb\120\uffdb\121\uffdb\001\002\000" +
    "\064\017\uffe0\041\uffe0\042\uffe0\045\uffe0\065\uffe0\070\uffe0" +
    "\071\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\100\uffe0\101" +
    "\uffe0\103\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0" +
    "\113\uffe0\115\uffe0\116\uffe0\117\uffe0\120\uffe0\121\uffe0\001" +
    "\002\000\040\042\014\045\030\065\020\070\027\071\012" +
    "\076\031\101\033\107\015\111\150\112\026\115\032\116" +
    "\235\117\021\120\025\121\017\001\002\000\004\005\230" +
    "\001\002\000\026\005\046\014\042\022\035\045\047\054" +
    "\037\055\050\056\041\060\036\061\040\062\034\001\002" +
    "\000\006\006\232\015\163\001\002\000\040\003\151\042" +
    "\014\045\030\065\020\070\027\071\012\076\031\101\033" +
    "\107\015\111\150\112\026\115\032\117\021\120\025\121" +
    "\017\001\002\000\040\042\014\045\030\065\020\070\027" +
    "\071\012\076\031\101\033\107\015\111\150\112\026\115" +
    "\032\116\234\117\021\120\025\121\017\001\002\000\064" +
    "\017\uffd9\041\uffd9\042\uffd9\045\uffd9\065\uffd9\070\uffd9\071" +
    "\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\100\uffd9\101\uffd9" +
    "\103\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112\uffd9\113" +
    "\uffd9\115\uffd9\116\uffd9\117\uffd9\120\uffd9\121\uffd9\001\002" +
    "\000\064\017\uffde\041\uffde\042\uffde\045\uffde\065\uffde\070" +
    "\uffde\071\uffde\073\uffde\074\uffde\075\uffde\076\uffde\100\uffde" +
    "\101\uffde\103\uffde\106\uffde\107\uffde\110\uffde\111\uffde\112" +
    "\uffde\113\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde" +
    "\001\002\000\040\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\111\150\112\026\115\032" +
    "\116\245\117\021\120\025\121\017\001\002\000\004\005" +
    "\240\001\002\000\026\005\046\014\042\022\035\045\047" +
    "\054\037\055\050\056\041\060\036\061\040\062\034\001" +
    "\002\000\006\006\242\015\163\001\002\000\040\003\151" +
    "\042\014\045\030\065\020\070\027\071\012\076\031\101" +
    "\033\107\015\111\150\112\026\115\032\117\021\120\025" +
    "\121\017\001\002\000\040\042\014\045\030\065\020\070" +
    "\027\071\012\076\031\101\033\107\015\111\150\112\026" +
    "\115\032\116\244\117\021\120\025\121\017\001\002\000" +
    "\064\017\uffda\041\uffda\042\uffda\045\uffda\065\uffda\070\uffda" +
    "\071\uffda\073\uffda\074\uffda\075\uffda\076\uffda\100\uffda\101" +
    "\uffda\103\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda" +
    "\113\uffda\115\uffda\116\uffda\117\uffda\120\uffda\121\uffda\001" +
    "\002\000\064\017\uffdf\041\uffdf\042\uffdf\045\uffdf\065\uffdf" +
    "\070\uffdf\071\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\100" +
    "\uffdf\101\uffdf\103\uffdf\106\uffdf\107\uffdf\110\uffdf\111\uffdf" +
    "\112\uffdf\113\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121" +
    "\uffdf\001\002\000\042\021\057\022\052\023\053\024\055" +
    "\025\061\026\067\027\066\030\056\031\071\032\063\033" +
    "\070\034\062\035\065\036\060\037\054\077\247\001\002" +
    "\000\004\017\250\001\002\000\026\005\046\014\042\022" +
    "\035\045\047\054\037\055\050\056\041\060\036\061\040" +
    "\062\034\001\002\000\010\017\253\074\252\100\254\001" +
    "\002\000\004\072\261\001\002\000\026\005\046\014\042" +
    "\022\035\045\047\054\037\055\050\056\041\060\036\061" +
    "\040\062\034\001\002\000\066\004\uffc5\017\uffc5\041\uffc5" +
    "\042\uffc5\045\uffc5\065\uffc5\070\uffc5\071\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\100\uffc5\101\uffc5\103\uffc5\106\uffc5" +
    "\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5\115\uffc5\116" +
    "\uffc5\117\uffc5\120\uffc5\121\uffc5\001\002\000\042\020\256" +
    "\021\057\022\052\023\053\024\055\025\061\026\067\027" +
    "\066\030\056\031\071\032\063\033\070\034\062\035\065" +
    "\036\060\037\054\001\002\000\004\072\257\001\002\000" +
    "\036\003\024\042\014\045\030\065\020\070\027\071\012" +
    "\076\031\101\033\107\015\112\026\115\032\117\021\120" +
    "\025\121\017\001\002\000\042\017\uffc3\042\014\045\030" +
    "\065\020\070\027\071\012\074\uffc3\076\031\100\uffc3\101" +
    "\033\107\015\112\026\115\032\117\021\120\025\121\017" +
    "\001\002\000\036\003\024\042\014\045\030\065\020\070" +
    "\027\071\012\076\031\101\033\107\015\112\026\115\032" +
    "\117\021\120\025\121\017\001\002\000\036\042\014\045" +
    "\030\065\020\070\027\071\012\076\031\100\263\101\033" +
    "\107\015\112\026\115\032\117\021\120\025\121\017\001" +
    "\002\000\066\004\uffc4\017\uffc4\041\uffc4\042\uffc4\045\uffc4" +
    "\065\uffc4\070\uffc4\071\uffc4\073\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\100\uffc4\101\uffc4\103\uffc4\106\uffc4\107\uffc4\110\uffc4" +
    "\111\uffc4\112\uffc4\113\uffc4\115\uffc4\116\uffc4\117\uffc4\120" +
    "\uffc4\121\uffc4\001\002\000\042\020\265\021\057\022\052" +
    "\023\053\024\055\025\061\026\067\027\066\030\056\031" +
    "\071\032\063\033\070\034\062\035\065\036\060\037\054" +
    "\001\002\000\004\072\266\001\002\000\036\003\024\042" +
    "\014\045\030\065\020\070\027\071\012\076\031\101\033" +
    "\107\015\112\026\115\032\117\021\120\025\121\017\001" +
    "\002\000\042\017\uffc2\042\014\045\030\065\020\070\027" +
    "\071\012\074\uffc2\076\031\100\uffc2\101\033\107\015\112" +
    "\026\115\032\117\021\120\025\121\017\001\002\000\042" +
    "\021\057\022\052\023\053\024\055\025\061\026\067\027" +
    "\066\030\056\031\071\032\063\033\070\034\062\035\065" +
    "\036\060\037\054\077\271\001\002\000\040\003\024\042" +
    "\014\045\030\065\020\070\027\071\012\076\031\101\033" +
    "\106\273\107\015\112\026\115\032\117\021\120\025\121" +
    "\017\001\002\000\036\042\014\045\030\065\020\070\027" +
    "\071\012\076\031\101\033\106\274\107\015\112\026\115" +
    "\032\117\021\120\025\121\017\001\002\000\064\017\uffe6" +
    "\041\uffe6\042\uffe6\045\uffe6\065\uffe6\070\uffe6\071\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\100\uffe6\101\uffe6\103\uffe6" +
    "\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\113\uffe6\115" +
    "\uffe6\116\uffe6\117\uffe6\120\uffe6\121\uffe6\001\002\000\064" +
    "\017\uffe7\041\uffe7\042\uffe7\045\uffe7\065\uffe7\070\uffe7\071" +
    "\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\100\uffe7\101\uffe7" +
    "\103\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7\113" +
    "\uffe7\115\uffe7\116\uffe7\117\uffe7\120\uffe7\121\uffe7\001\002" +
    "\000\040\003\024\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\112\026\114\277\115\032" +
    "\117\021\120\025\121\017\001\002\000\036\042\014\045" +
    "\030\065\020\070\027\071\012\076\031\101\033\107\015" +
    "\112\026\113\305\115\032\117\021\120\025\121\017\001" +
    "\002\000\004\005\300\001\002\000\026\005\046\014\042" +
    "\022\035\045\047\054\037\055\050\056\041\060\036\061" +
    "\040\062\034\001\002\000\006\006\302\015\163\001\002" +
    "\000\036\003\024\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\112\026\115\032\117\021" +
    "\120\025\121\017\001\002\000\036\042\014\045\030\065" +
    "\020\070\027\071\012\076\031\101\033\107\015\112\026" +
    "\113\304\115\032\117\021\120\025\121\017\001\002\000" +
    "\064\017\uffe1\041\uffe1\042\uffe1\045\uffe1\065\uffe1\070\uffe1" +
    "\071\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\100\uffe1\101" +
    "\uffe1\103\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1" +
    "\113\uffe1\115\uffe1\116\uffe1\117\uffe1\120\uffe1\121\uffe1\001" +
    "\002\000\064\017\uffe2\041\uffe2\042\uffe2\045\uffe2\065\uffe2" +
    "\070\uffe2\071\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\100" +
    "\uffe2\101\uffe2\103\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2" +
    "\112\uffe2\113\uffe2\115\uffe2\116\uffe2\117\uffe2\120\uffe2\121" +
    "\uffe2\001\002\000\042\004\307\021\057\022\052\023\053" +
    "\024\055\025\061\026\067\027\066\030\056\031\071\032" +
    "\063\033\070\034\062\035\065\036\060\037\054\001\002" +
    "\000\064\017\uffd3\041\uffd3\042\uffd3\045\uffd3\065\uffd3\070" +
    "\uffd3\071\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\100\uffd3" +
    "\101\uffd3\103\uffd3\106\uffd3\107\uffd3\110\uffd3\111\uffd3\112" +
    "\uffd3\113\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3" +
    "\001\002\000\060\017\ufff9\041\ufff9\042\ufff9\045\ufff9\065" +
    "\ufff9\070\ufff9\071\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\100\ufff9\101\ufff9\103\ufff9\106\ufff9\107\ufff9\110\ufff9\112" +
    "\ufff9\113\ufff9\115\ufff9\117\ufff9\120\ufff9\121\ufff9\001\002" +
    "\000\004\045\315\001\002\000\026\005\046\014\042\022" +
    "\035\045\047\054\037\055\050\056\041\060\036\061\040" +
    "\062\034\001\002\000\042\004\314\021\057\022\052\023" +
    "\053\024\055\025\061\026\067\027\066\030\056\031\071" +
    "\032\063\033\070\034\062\035\065\036\060\037\054\001" +
    "\002\000\064\017\uffec\041\uffec\042\uffec\045\uffec\065\uffec" +
    "\070\uffec\071\uffec\073\uffec\074\uffec\075\uffec\076\uffec\100" +
    "\uffec\101\uffec\103\uffec\106\uffec\107\uffec\110\uffec\111\uffec" +
    "\112\uffec\113\uffec\115\uffec\116\uffec\117\uffec\120\uffec\121" +
    "\uffec\001\002\000\012\006\uffc1\015\uffc1\043\uffc1\053\uffc1" +
    "\001\002\000\004\005\317\001\002\000\006\006\321\045" +
    "\030\001\002\000\006\006\323\015\311\001\002\000\004" +
    "\004\322\001\002\000\064\017\uffd6\041\uffd6\042\uffd6\045" +
    "\uffd6\065\uffd6\070\uffd6\071\uffd6\073\uffd6\074\uffd6\075\uffd6" +
    "\076\uffd6\100\uffd6\101\uffd6\103\uffd6\106\uffd6\107\uffd6\110" +
    "\uffd6\111\uffd6\112\uffd6\113\uffd6\115\uffd6\116\uffd6\117\uffd6" +
    "\120\uffd6\121\uffd6\001\002\000\004\004\324\001\002\000" +
    "\064\017\uffd5\041\uffd5\042\uffd5\045\uffd5\065\uffd5\070\uffd5" +
    "\071\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\100\uffd5\101" +
    "\uffd5\103\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5" +
    "\113\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5\001" +
    "\002\000\026\005\046\014\042\022\035\045\047\054\037" +
    "\055\050\056\041\060\036\061\040\062\034\001\002\000" +
    "\042\010\327\021\057\022\052\023\053\024\055\025\061" +
    "\026\067\027\066\030\056\031\071\032\063\033\070\034" +
    "\062\035\065\036\060\037\054\001\002\000\004\004\330" +
    "\001\002\000\064\017\ufff2\041\ufff2\042\ufff2\045\ufff2\065" +
    "\ufff2\070\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\100\ufff2\101\ufff2\103\ufff2\106\ufff2\107\ufff2\110\ufff2\111" +
    "\ufff2\112\ufff2\113\ufff2\115\ufff2\116\ufff2\117\ufff2\120\ufff2" +
    "\121\ufff2\001\002\000\042\004\332\021\057\022\052\023" +
    "\053\024\055\025\061\026\067\027\066\030\056\031\071" +
    "\032\063\033\070\034\062\035\065\036\060\037\054\001" +
    "\002\000\064\017\uffd4\041\uffd4\042\uffd4\045\uffd4\065\uffd4" +
    "\070\uffd4\071\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\100" +
    "\uffd4\101\uffd4\103\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4" +
    "\112\uffd4\113\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121" +
    "\uffd4\001\002\000\036\042\014\045\030\065\020\070\027" +
    "\071\012\076\031\101\033\107\015\110\336\112\026\115" +
    "\032\117\021\120\025\121\017\001\002\000\026\005\046" +
    "\014\042\022\035\045\047\054\037\055\050\056\041\060" +
    "\036\061\040\062\034\001\002\000\122\017\uffe4\021\057" +
    "\022\052\023\053\024\055\025\061\026\067\027\066\030" +
    "\056\031\071\032\063\033\070\034\062\035\065\036\060" +
    "\037\054\041\uffe4\042\uffe4\045\uffe4\065\uffe4\070\uffe4\071" +
    "\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\100\uffe4\101\uffe4" +
    "\103\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\113" +
    "\uffe4\115\uffe4\116\uffe4\117\uffe4\120\uffe4\121\uffe4\001\002" +
    "\000\026\005\046\014\042\022\035\045\047\054\037\055" +
    "\050\056\041\060\036\061\040\062\034\001\002\000\122" +
    "\017\uffe5\021\057\022\052\023\053\024\055\025\061\026" +
    "\067\027\066\030\056\031\071\032\063\033\070\034\062" +
    "\035\065\036\060\037\054\041\uffe5\042\uffe5\045\uffe5\065" +
    "\uffe5\070\uffe5\071\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5" +
    "\100\uffe5\101\uffe5\103\uffe5\106\uffe5\107\uffe5\110\uffe5\111" +
    "\uffe5\112\uffe5\113\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5" +
    "\121\uffe5\001\002\000\006\015\311\043\341\001\002\000" +
    "\014\046\343\047\342\050\345\051\344\052\346\001\002" +
    "\000\004\044\363\001\002\000\004\044\360\001\002\000" +
    "\004\044\355\001\002\000\004\044\352\001\002\000\004" +
    "\044\347\001\002\000\026\005\046\014\042\022\035\045" +
    "\047\054\037\055\050\056\041\060\036\061\040\062\034" +
    "\001\002\000\042\004\351\021\057\022\052\023\053\024" +
    "\055\025\061\026\067\027\066\030\056\031\071\032\063" +
    "\033\070\034\062\035\065\036\060\037\054\001\002\000" +
    "\064\017\uffed\041\uffed\042\uffed\045\uffed\065\uffed\070\uffed" +
    "\071\uffed\073\uffed\074\uffed\075\uffed\076\uffed\100\uffed\101" +
    "\uffed\103\uffed\106\uffed\107\uffed\110\uffed\111\uffed\112\uffed" +
    "\113\uffed\115\uffed\116\uffed\117\uffed\120\uffed\121\uffed\001" +
    "\002\000\026\005\046\014\042\022\035\045\047\054\037" +
    "\055\050\056\041\060\036\061\040\062\034\001\002\000" +
    "\042\004\354\021\057\022\052\023\053\024\055\025\061" +
    "\026\067\027\066\030\056\031\071\032\063\033\070\034" +
    "\062\035\065\036\060\037\054\001\002\000\064\017\uffef" +
    "\041\uffef\042\uffef\045\uffef\065\uffef\070\uffef\071\uffef\073" +
    "\uffef\074\uffef\075\uffef\076\uffef\100\uffef\101\uffef\103\uffef" +
    "\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef\113\uffef\115" +
    "\uffef\116\uffef\117\uffef\120\uffef\121\uffef\001\002\000\026" +
    "\005\046\014\042\022\035\045\047\054\037\055\050\056" +
    "\041\060\036\061\040\062\034\001\002\000\042\004\357" +
    "\021\057\022\052\023\053\024\055\025\061\026\067\027" +
    "\066\030\056\031\071\032\063\033\070\034\062\035\065" +
    "\036\060\037\054\001\002\000\064\017\uffee\041\uffee\042" +
    "\uffee\045\uffee\065\uffee\070\uffee\071\uffee\073\uffee\074\uffee" +
    "\075\uffee\076\uffee\100\uffee\101\uffee\103\uffee\106\uffee\107" +
    "\uffee\110\uffee\111\uffee\112\uffee\113\uffee\115\uffee\116\uffee" +
    "\117\uffee\120\uffee\121\uffee\001\002\000\026\005\046\014" +
    "\042\022\035\045\047\054\037\055\050\056\041\060\036" +
    "\061\040\062\034\001\002\000\042\004\362\021\057\022" +
    "\052\023\053\024\055\025\061\026\067\027\066\030\056" +
    "\031\071\032\063\033\070\034\062\035\065\036\060\037" +
    "\054\001\002\000\064\017\ufff1\041\ufff1\042\ufff1\045\ufff1" +
    "\065\ufff1\070\ufff1\071\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\100\ufff1\101\ufff1\103\ufff1\106\ufff1\107\ufff1\110\ufff1" +
    "\111\ufff1\112\ufff1\113\ufff1\115\ufff1\116\ufff1\117\ufff1\120" +
    "\ufff1\121\ufff1\001\002\000\026\005\046\014\042\022\035" +
    "\045\047\054\037\055\050\056\041\060\036\061\040\062" +
    "\034\001\002\000\042\004\365\021\057\022\052\023\053" +
    "\024\055\025\061\026\067\027\066\030\056\031\071\032" +
    "\063\033\070\034\062\035\065\036\060\037\054\001\002" +
    "\000\064\017\ufff0\041\ufff0\042\ufff0\045\ufff0\065\ufff0\070" +
    "\ufff0\071\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\100\ufff0" +
    "\101\ufff0\103\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\112" +
    "\ufff0\113\ufff0\115\ufff0\116\ufff0\117\ufff0\120\ufff0\121\ufff0" +
    "\001\002\000\006\002\ufffc\040\ufffc\001\002\000\076\003" +
    "\024\021\057\022\052\023\053\024\055\025\061\026\067" +
    "\027\066\030\056\031\071\032\063\033\070\034\062\035" +
    "\065\036\060\037\054\042\014\045\030\065\020\070\027" +
    "\071\012\072\371\076\031\101\033\107\015\112\026\115" +
    "\032\117\021\120\025\121\017\001\002\000\040\042\014" +
    "\045\030\065\020\070\027\071\012\074\376\075\375\076" +
    "\031\101\033\107\015\112\026\115\032\117\021\120\025" +
    "\121\017\001\002\000\036\003\024\042\014\045\030\065" +
    "\020\070\027\071\012\076\031\101\033\107\015\112\026" +
    "\115\032\117\021\120\025\121\017\001\002\000\036\042" +
    "\014\045\030\065\020\070\027\071\012\073\373\076\031" +
    "\101\033\107\015\112\026\115\032\117\021\120\025\121" +
    "\017\001\002\000\066\004\uffc8\017\uffc8\041\uffc8\042\uffc8" +
    "\045\uffc8\065\uffc8\070\uffc8\071\uffc8\073\uffc8\074\uffc8\075" +
    "\uffc8\076\uffc8\100\uffc8\101\uffc8\103\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\112\uffc8\113\uffc8\115\uffc8\116\uffc8\117" +
    "\uffc8\120\uffc8\121\uffc8\001\002\000\006\074\u0104\075\u0105" +
    "\001\002\000\026\005\046\014\042\022\035\045\047\054" +
    "\037\055\050\056\041\060\036\061\040\062\034\001\002" +
    "\000\036\003\024\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\112\026\115\032\117\021" +
    "\120\025\121\017\001\002\000\036\042\014\045\030\065" +
    "\020\070\027\071\012\073\u0100\076\031\101\033\107\015" +
    "\112\026\115\032\117\021\120\025\121\017\001\002\000" +
    "\066\004\uffc7\017\uffc7\041\uffc7\042\uffc7\045\uffc7\065\uffc7" +
    "\070\uffc7\071\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\100" +
    "\uffc7\101\uffc7\103\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7" +
    "\112\uffc7\113\uffc7\115\uffc7\116\uffc7\117\uffc7\120\uffc7\121" +
    "\uffc7\001\002\000\042\021\057\022\052\023\053\024\055" +
    "\025\061\026\067\027\066\030\056\031\071\032\063\033" +
    "\070\034\062\035\065\036\060\037\054\072\u0102\001\002" +
    "\000\036\003\024\042\014\045\030\065\020\070\027\071" +
    "\012\076\031\101\033\107\015\112\026\115\032\117\021" +
    "\120\025\121\017\001\002\000\040\042\014\045\030\065" +
    "\020\070\027\071\012\074\uffbc\075\uffbc\076\031\101\033" +
    "\107\015\112\026\115\032\117\021\120\025\121\017\001" +
    "\002\000\036\003\024\042\014\045\030\065\020\070\027" +
    "\071\012\076\031\101\033\107\015\112\026\115\032\117" +
    "\021\120\025\121\017\001\002\000\026\005\046\014\042" +
    "\022\035\045\047\054\037\055\050\056\041\060\036\061" +
    "\040\062\034\001\002\000\042\021\057\022\052\023\053" +
    "\024\055\025\061\026\067\027\066\030\056\031\071\032" +
    "\063\033\070\034\062\035\065\036\060\037\054\072\u0107" +
    "\001\002\000\036\003\024\042\014\045\030\065\020\070" +
    "\027\071\012\076\031\101\033\107\015\112\026\115\032" +
    "\117\021\120\025\121\017\001\002\000\040\042\014\045" +
    "\030\065\020\070\027\071\012\074\uffbd\075\uffbd\076\031" +
    "\101\033\107\015\112\026\115\032\117\021\120\025\121" +
    "\017\001\002\000\036\042\014\045\030\065\020\070\027" +
    "\071\012\073\u010a\076\031\101\033\107\015\112\026\115" +
    "\032\117\021\120\025\121\017\001\002\000\066\004\uffc6" +
    "\017\uffc6\041\uffc6\042\uffc6\045\uffc6\065\uffc6\070\uffc6\071" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6\101\uffc6" +
    "\103\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113" +
    "\uffc6\115\uffc6\116\uffc6\117\uffc6\120\uffc6\121\uffc6\001\002" +
    "\000\006\002\ufffd\040\ufffd\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\010\002\003\004\007\005\005\001\001\000" +
    "\002\001\001\000\004\005\u010a\001\001\000\002\001\001" +
    "\000\012\003\012\006\021\013\022\015\015\001\001\000" +
    "\004\005\010\001\001\000\002\001\001\000\010\007\044" +
    "\010\366\014\042\001\001\000\010\006\121\013\022\015" +
    "\015\001\001\000\004\013\337\001\001\000\012\003\332" +
    "\006\021\013\022\015\015\001\001\000\002\001\001\000" +
    "\010\007\044\010\330\014\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\307\013\022\015\015\001\001\000\010\007\044" +
    "\010\305\014\042\001\001\000\002\001\001\000\010\007" +
    "\044\010\267\014\042\001\001\000\002\001\001\000\010" +
    "\007\044\010\245\014\042\001\001\000\002\001\001\000" +
    "\010\007\044\010\043\014\042\001\001\000\002\001\001" +
    "\000\010\007\044\010\135\014\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\044\010\050\014\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\044\010\107\014\042\001\001\000\010\007\044" +
    "\010\106\014\042\001\001\000\010\007\044\010\105\014" +
    "\042\001\001\000\010\007\044\010\104\014\042\001\001" +
    "\000\010\007\044\010\103\014\042\001\001\000\010\007" +
    "\044\010\102\014\042\001\001\000\010\007\044\010\101" +
    "\014\042\001\001\000\010\007\044\010\100\014\042\001" +
    "\001\000\010\007\044\010\077\014\042\001\001\000\010" +
    "\007\044\010\076\014\042\001\001\000\002\001\001\000" +
    "\010\007\044\010\075\014\042\001\001\000\010\007\044" +
    "\010\074\014\042\001\001\000\010\007\044\010\073\014" +
    "\042\001\001\000\010\007\044\010\072\014\042\001\001" +
    "\000\010\007\044\010\071\014\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\044\010\111\014\042" +
    "\001\001\000\002\001\001\000\010\007\044\010\113\014" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\116\006\021\013\022\015\015\001\001\000\010\006" +
    "\121\013\022\015\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\044\010\123\014" +
    "\042\001\001\000\002\001\001\000\012\003\125\006\021" +
    "\013\022\015\015\001\001\000\010\006\121\013\022\015" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\145\013\022\015\015\016\146\020\235\001" +
    "\001\000\014\006\145\013\022\015\015\016\146\020\225" +
    "\001\001\000\014\006\145\013\022\015\015\016\146\020" +
    "\215\001\001\000\014\006\145\013\022\015\015\016\146" +
    "\020\205\001\001\000\014\006\145\013\022\015\015\016" +
    "\146\020\144\001\001\000\012\006\165\013\022\015\015" +
    "\016\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\044\010\200\014\042\015\201\001\001\000\012" +
    "\006\176\013\022\015\015\016\177\001\001\000\002\001" +
    "\001\000\012\007\044\010\154\014\042\017\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\044\010\170\014\042\001\001\000" +
    "\014\006\145\013\022\015\015\016\146\020\164\001\001" +
    "\000\012\006\165\013\022\015\015\016\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\165\013\022\015\015\016\167\001\001\000\002\001" +
    "\001\000\012\007\044\010\154\014\042\017\210\001\001" +
    "\000\002\001\001\000\014\006\145\013\022\015\015\016" +
    "\146\020\212\001\001\000\012\006\165\013\022\015\015" +
    "\016\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\165\013\022\015\015\016\167\001\001\000\002" +
    "\001\001\000\012\007\044\010\154\014\042\017\220\001" +
    "\001\000\002\001\001\000\014\006\145\013\022\015\015" +
    "\016\146\020\222\001\001\000\012\006\165\013\022\015" +
    "\015\016\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\165\013\022\015\015\016\167\001\001\000" +
    "\002\001\001\000\012\007\044\010\154\014\042\017\230" +
    "\001\001\000\002\001\001\000\014\006\145\013\022\015" +
    "\015\016\146\020\232\001\001\000\012\006\165\013\022" +
    "\015\015\016\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\165\013\022\015\015\016\167\001\001" +
    "\000\002\001\001\000\012\007\044\010\154\014\042\017" +
    "\240\001\001\000\002\001\001\000\014\006\145\013\022" +
    "\015\015\016\146\020\242\001\001\000\012\006\165\013" +
    "\022\015\015\016\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\250\001\001\000" +
    "\010\007\044\010\263\014\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\044\010\254\014\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\257\006\021\013\022\015\015\001\001\000" +
    "\010\006\121\013\022\015\015\001\001\000\012\003\261" +
    "\006\021\013\022\015\015\001\001\000\010\006\121\013" +
    "\022\015\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\266\006\021\013\022\015" +
    "\015\001\001\000\010\006\121\013\022\015\015\001\001" +
    "\000\002\001\001\000\012\003\271\006\021\013\022\015" +
    "\015\001\001\000\010\006\121\013\022\015\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\275\006" +
    "\021\013\022\015\015\001\001\000\010\006\121\013\022" +
    "\015\015\001\001\000\002\001\001\000\012\007\044\010" +
    "\154\014\042\017\300\001\001\000\002\001\001\000\012" +
    "\003\302\006\021\013\022\015\015\001\001\000\010\006" +
    "\121\013\022\015\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\044\010\312\014\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\317\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\044\010\325\014\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\121" +
    "\013\022\015\015\001\001\000\010\007\044\010\334\014" +
    "\042\001\001\000\002\001\001\000\010\007\044\010\336" +
    "\014\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\044\010\347\014\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\044\010\352\014\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\044\010\355" +
    "\014\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\044\010\360\014\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\044\010\363\014\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\367\006\021\013\022\015\015\001\001\000" +
    "\012\006\121\011\373\013\022\015\015\001\001\000\012" +
    "\003\371\006\021\013\022\015\015\001\001\000\010\006" +
    "\121\013\022\015\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\044\010\u0100\014\042\001\001\000" +
    "\012\003\376\006\021\013\022\015\015\001\001\000\010" +
    "\006\121\013\022\015\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\u0102\006\021\013\022\015\015" +
    "\001\001\000\010\006\121\013\022\015\015\001\001\000" +
    "\012\003\u0108\006\021\013\022\015\015\001\001\000\010" +
    "\007\044\010\u0105\014\042\001\001\000\002\001\001\000" +
    "\012\003\u0107\006\021\013\022\015\015\001\001\000\010" +
    "\006\121\013\022\015\015\001\001\000\010\006\121\013" +
    "\022\015\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST= new LinkedList<>();
    public Arbol arbol;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Interfaz.Principal.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public Arbol getArbol() {
        return arbol;
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se definió dentro del parser
                                                    for(Instruccion ins: a.getInstructions()){
                                                    parser.AST.add(ins);
                                                    }
                                                    
                                                    Nodo NODERAIZ = new Nodo("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= globales global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones Globales"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globales ::= global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globales ::= error global 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global ::= RINICIO instrucciones RFIN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Main(a.getInstructions()));
                                                    RESULT.addSon("inicio");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("fin");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("global",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instrucciones instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error instruccion 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccionesFuncion ::= instruccionesFuncion instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccionesFuncion ::= instruccionesFuncion returns 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccionesFuncion ::= instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccionesFuncion ::= returns 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccionesFuncion ::= error instruccion 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccionesFuncion ::= error returns 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= REVALUAR CORIZQ expresion_relacional CORDER PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Evaluar((Operacion)a.getIns()));
                                                    RESULT.addSon("EVALUAR");
                                                    RESULT.addSon("[");
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("]");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= RINGRESAR listaVariables RCOMO NUMDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("numero");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= RINGRESAR listaVariables RCOMO FLOATDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("float");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= RINGRESAR listaVariables RCOMO CADDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CADENA, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("cadena");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RINGRESAR listaVariables RCOMO BOOLDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.BOOLEAN, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("boolean");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= RINGRESAR listaVariables RCOMO CARDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CARACTER, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("caracter");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= listaVariables FLECHAASIGN expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Asignacion"), new Asignacion(a, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RHACER instrucciones RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), d.getInstructions()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RHACER RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), new LinkedList<>() ));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RCON RINCREMENTAL expresion_relacional RHACER instrucciones RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), e.getInstructions(), (Operacion)d.getIns()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("con incremental");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(e);
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RCON RINCREMENTAL expresion_relacional RHACER RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), new LinkedList<>(), (Operacion)d.getIns()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("con incremental");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= RMIENTRAS expresion_relacional RHACER instrucciones RFIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(), b.getInstructions()));
                                                                                                    RESULT.addSon("mientras");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("finmientras");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= RMIENTRAS expresion_relacional RHACER RFIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(),  new LinkedList<>()));
                                                                                                    RESULT.addSon("mientras");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    
                                                                                                    RESULT.addSon("finmientras");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RREPETIR instrucciones RHASTA_QUE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new DoWhile((Operacion)b.getIns(), a.getInstructions()));
                                                                                                    RESULT.addSon("repetir");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hasta_que");
                                                                                                    RESULT.addSon(b);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= RREPETIR RHASTA_QUE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(),  new LinkedList<>()));
                                                                                                    RESULT.addSon("repetir");
                                                                                                    
                                                                                                    RESULT.addSon("hasta_que");
                                                                                                    RESULT.addSon("a");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= condicion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= a;
                                                                                                    
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= RMETODO IDENTIFICADOR instrucciones RFIN_METODO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Metodo(a, b.getInstructions(), false));
                                                                                                    parser.AST.add(new Metodo(a, b.getInstructions(), true));
                                                                                                    RESULT.addSon("metodo");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("fin_metodo");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion ::= RMETODO IDENTIFICADOR RCON_PARAMETROS PARIZQ listaParametros PARDER instrucciones RFIN_METODO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Metodo(a, b.getInstructions(), c.getInstructions(), false));
                                                                                                    parser.AST.add(new Metodo(a, b.getInstructions(), c.getInstructions(), true));
                                                                                                    RESULT.addSon("metodo");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("con_parametros");
                                                                                                    RESULT.addSon("(");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(")");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_metodo");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= RFUNCION IDENTIFICADOR NUMDATO instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.NUMERO, c.getInstructions(),false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.NUMERO, c.getInstructions(),true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= RFUNCION IDENTIFICADOR FLOATDATO instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.NUMERO, c.getInstructions(),false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.NUMERO, c.getInstructions(),true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= RFUNCION IDENTIFICADOR CADDATO instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.CADENA, c.getInstructions(),false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.CADENA, c.getInstructions(),true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= RFUNCION IDENTIFICADOR BOOLDATO instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.BOOLEAN, c.getInstructions(),false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.BOOLEAN, c.getInstructions(),true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= RFUNCION IDENTIFICADOR CARDATO instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.CARACTER, c.getInstructions(), false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.CARACTER, c.getInstructions(),true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= RFUNCION IDENTIFICADOR NUMDATO RCON_PARAMETROS PARIZQ listaParametros PARDER instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.NUMERO,c.getInstructions(), d.getInstructions(), false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.NUMERO,c.getInstructions(), d.getInstructions(), true));
                                                                                                    
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("con_parametros");
                                                                                                    RESULT.addSon("(");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon(")");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= RFUNCION IDENTIFICADOR FLOATDATO RCON_PARAMETROS PARIZQ listaParametros PARDER instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.NUMERO, c.getInstructions(), d.getInstructions(), false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.NUMERO,c.getInstructions(), d.getInstructions(), true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("con_parametros");
                                                                                                    RESULT.addSon("(");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon(")");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= RFUNCION IDENTIFICADOR CADDATO RCON_PARAMETROS PARIZQ listaParametros PARDER instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.CADENA, c.getInstructions(), d.getInstructions(), false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.CADENA,c.getInstructions(), d.getInstructions(), true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("con_parametros");
                                                                                                    RESULT.addSon("(");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon(")");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= RFUNCION IDENTIFICADOR BOOLDATO RCON_PARAMETROS PARIZQ listaParametros PARDER instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.BOOLEAN, c.getInstructions(), d.getInstructions(), false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.BOOLEAN,c.getInstructions(), d.getInstructions(), true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("con_parametros");
                                                                                                    RESULT.addSon("(");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon(")");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= RFUNCION IDENTIFICADOR CARDATO RCON_PARAMETROS PARIZQ listaParametros PARDER instruccionesFuncion RFIN_FUNCION 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Funcion(a, Funcion.Tipo_dato.CARACTER, c.getInstructions(), d.getInstructions(), false));
                                                                                                    parser.AST.add(new Funcion(a, Funcion.Tipo_dato.CARACTER,c.getInstructions(), d.getInstructions(), true));
                                                                                                    RESULT.addSon("funcion");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("con_parametros");
                                                                                                    RESULT.addSon("(");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon(")");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_funcion");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= REJECUTAR IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Llamada"), new Llamada(a));
                                                                                                        RESULT.addSon("ejecutar");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("(");
                                                                                                        RESULT.addSon(")");
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= REJECUTAR IDENTIFICADOR PARIZQ listaVariables PARDER PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Llamada"), new Llamada(a, b));
                                                                                                        RESULT.addSon("ejecutar");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("(");
                                                                                                        RESULT.addSon(b);
                                                                                                        RESULT.addSon(")");
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= RIMPRIMIR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Impresion"), new Impresion((Operacion)a.getIns(), Impresion.Tipo_print.PRINT));
                                                                                                        RESULT.addSon("imprimir");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= RIMPRIMIR_NL expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Impresion"), new Impresion((Operacion)a.getIns(), Impresion.Tipo_print.PRINTLN));
                                                                                                        RESULT.addSon("imprimir");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaParametros ::= listaParametros COMA expresion_relacional NUMDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaParametros ::= listaParametros COMA expresion_relacional FLOATDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaParametros ::= listaParametros COMA expresion_relacional CADDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.CADENA));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listaParametros ::= listaParametros COMA expresion_relacional BOOLDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.BOOLEAN));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listaParametros ::= listaParametros COMA expresion_relacional CARDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.CARACTER));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listaParametros ::= expresion_relacional NUMDATO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaParametros ::= expresion_relacional FLOATDATO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaParametros ::= expresion_relacional CADDATO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.CADENA));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaParametros ::= expresion_relacional BOOLDATO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.BOOLEAN));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listaParametros ::= expresion_relacional CARDATO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro((Operacion)a.getIns(), Parametro.Tipo_dato.CARACTER));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicion ::= RSI expresion_relacional RENTONCES instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("SI");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon("entonces");
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // condicion ::= RSI expresion_relacional instrucciones RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                             RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");   
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion ::= RSI expresion_relacional instrucciones else_ifs RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon(l);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= RSEGUN expresion_relacional RHACER cases RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= RSEGUN expresion_relacional RHACER cases RELSE RENTONCES instrucciones RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions(),c.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("else");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cases ::= cases INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Casos"), l.getInstructions());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cases ::= INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Case"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listaVariables ::= listaVariables COMA NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a +"," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listaVariables ::= NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // returns ::= RRETORNAR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Return"), new Return((Operacion)a.getIns()));
                                                                                                        RESULT.addSon("retornar");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("returns",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // returns ::= RRETORNAR condicion PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Return"), new Return(a.getIns()));
                                                                                                        RESULT.addSon("retornar");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("returns",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else_ifs ::= else_ifs ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("O_SI's"), l.getInstructions());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(), If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("ELSE");
                                                                                                        RESULT.addSon("IF");
                                                                                                        RESULT.addSon("(");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(")");
                                                                                                        RESULT.addSon("{");
                                                                                                        RESULT.addSon(b);
                                                                                                        RESULT.addSon("}");
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else_ifs ::= ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("O_SI"), new LinkedList<>());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon("O_SI");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_relacional ::= expresion_relacional RMAYOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_relacional ::= expresion_relacional RMENOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_relacional ::= expresion_relacional RMAYORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_relacional ::= expresion_relacional RMENORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_relacional ::= expresion_relacional RIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.IGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_relacional ::= expresion_relacional RDIFERENTE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.DIFERENTE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("diferente");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_relacional ::= expresion_relacional RAND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.AND));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("and");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_relacional ::= expresion_relacional ROR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.OR));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("or");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion_relacional ::= expresion_relacional RNOT expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOT));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("not");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion_relacional ::= expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = a;
                                                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(a);                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion_relacional MAS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("+");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion_relacional MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion_relacional POR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("*");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion_relacional DIVIDIDO expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("/");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion_relacional RPOTENCIA expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("potencia");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= expresion_relacional RMOD expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mod");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= PARIZQ expresion_relacional PARDER 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.PARENTESIS));
                                                    RESULT.addSon("(");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(")");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= expresion_valor 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                 RESULT= a ;
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_valor ::= RVERDADERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                   RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_valor ::= RFALSO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                     RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_valor ::= NOMVARIABLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_valor ::= ENTERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_valor ::= DECIMAL 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));          
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_valor ::= STRING 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CADENA));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_valor ::= CHAR 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CARACTER));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_valor ::= COMSIMPLE DOLAR LLAVIZQ ENTERO LLAVDER COMSIMPLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion(d,Operacion.Tipo_operacion.CARACTER));
                                                    RESULT.addSon(a+b+c+d+e+f);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
