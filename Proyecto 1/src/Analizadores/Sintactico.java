
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Produccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.If;
import Estructuras.Instrucciones.While;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.Declaracion;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Switch;
import Estructuras.Instrucciones.Case;
import Estructuras.Instrucciones.Main;
import java.util.LinkedList;
import Estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\006\007\000\002\006\011\000\002\006\007\000\002" +
    "\006\010\000\002\006\011\000\002\006\011\000\002\006" +
    "\011\000\002\006\011\000\002\006\011\000\002\006\011" +
    "\000\002\006\006\000\002\006\007\000\002\006\012\000" +
    "\002\012\010\000\002\012\007\000\002\013\005\000\002" +
    "\013\003\000\002\011\007\000\002\011\006\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\003\000\002" +
    "\007\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\003\005\040\007\001\002\000\004\002" +
    "\225\001\002\000\004\040\007\001\002\000\006\002\ufffe" +
    "\040\ufffe\001\002\000\020\003\017\042\012\045\021\064" +
    "\023\067\013\070\020\075\016\001\002\000\006\002\000" +
    "\040\007\001\002\000\006\002\uffff\040\uffff\001\002\000" +
    "\004\045\021\001\002\000\004\005\170\001\002\000\020" +
    "\041\167\042\012\045\021\064\023\067\013\070\020\075" +
    "\016\001\002\000\034\012\ufffa\017\ufffa\041\ufffa\042\ufffa" +
    "\045\ufffa\064\ufffa\067\ufffa\070\ufffa\072\ufffa\073\ufffa\074" +
    "\ufffa\075\ufffa\077\ufffa\001\002\000\026\005\037\014\032" +
    "\022\026\045\040\054\030\055\041\056\033\057\027\060" +
    "\031\061\025\001\002\000\016\042\012\045\021\064\023" +
    "\067\013\070\020\075\016\001\002\000\026\005\037\014" +
    "\032\022\026\045\040\054\030\055\041\056\033\057\027" +
    "\060\031\061\025\001\002\000\010\015\uffe8\043\uffe8\053" +
    "\uffe8\001\002\000\006\015\112\053\113\001\002\000\004" +
    "\007\024\001\002\000\026\005\037\014\032\022\026\045" +
    "\040\054\030\055\041\056\033\057\027\060\031\061\025" +
    "\001\002\000\072\003\uffce\004\uffce\006\uffce\010\uffce\020" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\042\uffce\045\uffce\064\uffce\067\uffce" +
    "\070\uffce\071\uffce\075\uffce\076\uffce\001\002\000\026\005" +
    "\037\014\032\022\026\045\040\054\030\055\041\056\033" +
    "\057\027\060\031\061\025\001\002\000\072\003\uffd2\004" +
    "\uffd2\006\uffd2\010\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\042\uffd2" +
    "\045\uffd2\064\uffd2\067\uffd2\070\uffd2\071\uffd2\075\uffd2\076" +
    "\uffd2\001\002\000\072\003\uffcf\004\uffcf\006\uffcf\010\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\042\uffcf\045\uffcf\064\uffcf\067" +
    "\uffcf\070\uffcf\071\uffcf\075\uffcf\076\uffcf\001\002\000\072" +
    "\003\uffd1\004\uffd1\006\uffd1\010\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\042\uffd1\045\uffd1\064\uffd1\067\uffd1\070\uffd1\071\uffd1" +
    "\075\uffd1\076\uffd1\001\002\000\004\013\104\001\002\000" +
    "\072\003\uffcd\004\uffcd\006\uffcd\010\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\042\uffcd\045\uffcd\064\uffcd\067\uffcd\070\uffcd\071" +
    "\uffcd\075\uffcd\076\uffcd\001\002\000\072\003\uffd3\004\uffd3" +
    "\006\uffd3\010\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\042\uffd3\045" +
    "\uffd3\064\uffd3\067\uffd3\070\uffd3\071\uffd3\075\uffd3\076\uffd3" +
    "\001\002\000\042\010\102\021\050\022\043\023\044\024" +
    "\047\025\051\026\061\027\057\030\045\031\062\032\054" +
    "\033\060\034\053\035\055\036\052\037\046\001\002\000" +
    "\072\003\uffdc\004\uffdc\006\uffdc\010\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\042\uffdc\045\uffdc\064\uffdc\067\uffdc\070\uffdc\071" +
    "\uffdc\075\uffdc\076\uffdc\001\002\000\026\005\037\014\032" +
    "\022\026\045\040\054\030\055\041\056\033\057\027\060" +
    "\031\061\025\001\002\000\072\003\uffd0\004\uffd0\006\uffd0" +
    "\010\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\042\uffd0\045\uffd0\064" +
    "\uffd0\067\uffd0\070\uffd0\071\uffd0\075\uffd0\076\uffd0\001\002" +
    "\000\072\003\uffcc\004\uffcc\006\uffcc\010\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\042\uffcc\045\uffcc\064\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\075\uffcc\076\uffcc\001\002\000\042\006\056\021" +
    "\050\022\043\023\044\024\047\025\051\026\061\027\057" +
    "\030\045\031\062\032\054\033\060\034\053\035\055\036" +
    "\052\037\046\001\002\000\026\005\037\014\032\022\026" +
    "\045\040\054\030\055\041\056\033\057\027\060\031\061" +
    "\025\001\002\000\026\005\037\014\032\022\026\045\040" +
    "\054\030\055\041\056\033\057\027\060\031\061\025\001" +
    "\002\000\026\005\037\014\032\022\026\045\040\054\030" +
    "\055\041\056\033\057\027\060\031\061\025\001\002\000" +
    "\026\005\037\014\032\022\026\045\040\054\030\055\041" +
    "\056\033\057\027\060\031\061\025\001\002\000\026\005" +
    "\037\014\032\022\026\045\040\054\030\055\041\056\033" +
    "\057\027\060\031\061\025\001\002\000\026\005\037\014" +
    "\032\022\026\045\040\054\030\055\041\056\033\057\027" +
    "\060\031\061\025\001\002\000\026\005\037\014\032\022" +
    "\026\045\040\054\030\055\041\056\033\057\027\060\031" +
    "\061\025\001\002\000\026\005\037\014\032\022\026\045" +
    "\040\054\030\055\041\056\033\057\027\060\031\061\025" +
    "\001\002\000\026\005\037\014\032\022\026\045\040\054" +
    "\030\055\041\056\033\057\027\060\031\061\025\001\002" +
    "\000\026\005\037\014\032\022\026\045\040\054\030\055" +
    "\041\056\033\057\027\060\031\061\025\001\002\000\026" +
    "\005\037\014\032\022\026\045\040\054\030\055\041\056" +
    "\033\057\027\060\031\061\025\001\002\000\072\003\uffd4" +
    "\004\uffd4\006\uffd4\010\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\042" +
    "\uffd4\045\uffd4\064\uffd4\067\uffd4\070\uffd4\071\uffd4\075\uffd4" +
    "\076\uffd4\001\002\000\026\005\037\014\032\022\026\045" +
    "\040\054\030\055\041\056\033\057\027\060\031\061\025" +
    "\001\002\000\026\005\037\014\032\022\026\045\040\054" +
    "\030\055\041\056\033\057\027\060\031\061\025\001\002" +
    "\000\026\005\037\014\032\022\026\045\040\054\030\055" +
    "\041\056\033\057\027\060\031\061\025\001\002\000\026" +
    "\005\037\014\032\022\026\045\040\054\030\055\041\056" +
    "\033\057\027\060\031\061\025\001\002\000\072\003\uffe3" +
    "\004\uffe3\006\uffe3\010\uffe3\020\uffe3\021\050\022\043\023" +
    "\044\024\047\025\051\026\061\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\042" +
    "\uffe3\045\uffe3\064\uffe3\067\uffe3\070\uffe3\071\uffe3\075\uffe3" +
    "\076\uffe3\001\002\000\072\003\uffd5\004\uffd5\006\uffd5\010" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\051" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\042\uffd5\045\uffd5\064\uffd5" +
    "\067\uffd5\070\uffd5\071\uffd5\075\uffd5\076\uffd5\001\002\000" +
    "\072\003\uffe1\004\uffe1\006\uffe1\010\uffe1\020\uffe1\021\050" +
    "\022\043\023\044\024\047\025\051\026\061\027\057\030" +
    "\045\031\062\032\054\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\042\uffe1\045\uffe1\064\uffe1\067\uffe1\070\uffe1\071" +
    "\uffe1\075\uffe1\076\uffe1\001\002\000\072\003\uffe5\004\uffe5" +
    "\006\uffe5\010\uffe5\020\uffe5\021\050\022\043\023\044\024" +
    "\047\025\051\026\061\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\042\uffe5\045" +
    "\uffe5\064\uffe5\067\uffe5\070\uffe5\071\uffe5\075\uffe5\076\uffe5" +
    "\001\002\000\072\003\uffde\004\uffde\006\uffde\010\uffde\020" +
    "\uffde\021\050\022\043\023\044\024\047\025\051\026\061" +
    "\027\057\030\045\031\062\032\054\033\060\034\053\035" +
    "\uffde\036\052\037\046\042\uffde\045\uffde\064\uffde\067\uffde" +
    "\070\uffde\071\uffde\075\uffde\076\uffde\001\002\000\072\003" +
    "\uffe2\004\uffe2\006\uffe2\010\uffe2\020\uffe2\021\050\022\043" +
    "\023\044\024\047\025\051\026\061\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\042\uffe2\045\uffe2\064\uffe2\067\uffe2\070\uffe2\071\uffe2\075" +
    "\uffe2\076\uffe2\001\002\000\072\003\uffe0\004\uffe0\006\uffe0" +
    "\010\uffe0\020\uffe0\021\050\022\043\023\044\024\047\025" +
    "\051\026\061\027\057\030\045\031\062\032\054\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\042\uffe0\045\uffe0\064" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\075\uffe0\076\uffe0\001\002" +
    "\000\072\003\uffdf\004\uffdf\006\uffdf\010\uffdf\020\uffdf\021" +
    "\050\022\043\023\044\024\047\025\051\026\061\027\057" +
    "\030\045\031\062\032\054\033\060\034\053\035\uffdf\036" +
    "\uffdf\037\046\042\uffdf\045\uffdf\064\uffdf\067\uffdf\070\uffdf" +
    "\071\uffdf\075\uffdf\076\uffdf\001\002\000\072\003\uffd6\004" +
    "\uffd6\006\uffd6\010\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\051\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\042\uffd6" +
    "\045\uffd6\064\uffd6\067\uffd6\070\uffd6\071\uffd6\075\uffd6\076" +
    "\uffd6\001\002\000\072\003\uffda\004\uffda\006\uffda\010\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\044\024\047\025\051\026" +
    "\061\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\042\uffda\045\uffda\064\uffda\067" +
    "\uffda\070\uffda\071\uffda\075\uffda\076\uffda\001\002\000\072" +
    "\003\uffd7\004\uffd7\006\uffd7\010\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\051\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\042\uffd7\045\uffd7\064\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\075\uffd7\076\uffd7\001\002\000\072\003\uffdd\004\uffdd\006" +
    "\uffdd\010\uffdd\020\uffdd\021\050\022\043\023\044\024\047" +
    "\025\051\026\061\027\057\030\045\031\062\032\054\033" +
    "\060\034\053\035\uffdd\036\uffdd\037\046\042\uffdd\045\uffdd" +
    "\064\uffdd\067\uffdd\070\uffdd\071\uffdd\075\uffdd\076\uffdd\001" +
    "\002\000\072\003\uffe4\004\uffe4\006\uffe4\010\uffe4\020\uffe4" +
    "\021\050\022\043\023\044\024\047\025\051\026\061\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\042\uffe4\045\uffe4\064\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\075\uffe4\076\uffe4\001\002\000\072\003\uffd8" +
    "\004\uffd8\006\uffd8\010\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\051\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\042" +
    "\uffd8\045\uffd8\064\uffd8\067\uffd8\070\uffd8\071\uffd8\075\uffd8" +
    "\076\uffd8\001\002\000\072\003\uffd9\004\uffd9\006\uffd9\010" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\044\024\047\025\051" +
    "\026\061\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\042\uffd9\045\uffd9\064\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\075\uffd9\076\uffd9\001\002\000" +
    "\004\004\103\001\002\000\034\012\ufff8\017\ufff8\041\ufff8" +
    "\042\ufff8\045\ufff8\064\ufff8\067\ufff8\070\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\077\ufff8\001\002\000\004\011\105" +
    "\001\002\000\004\054\106\001\002\000\004\012\107\001" +
    "\002\000\004\014\110\001\002\000\072\003\uffcb\004\uffcb" +
    "\006\uffcb\010\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\042\uffcb\045" +
    "\uffcb\064\uffcb\067\uffcb\070\uffcb\071\uffcb\075\uffcb\076\uffcb" +
    "\001\002\000\072\003\uffdb\004\uffdb\006\uffdb\010\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\042\uffdb\045\uffdb\064\uffdb\067\uffdb" +
    "\070\uffdb\071\uffdb\075\uffdb\076\uffdb\001\002\000\004\045" +
    "\116\001\002\000\026\005\037\014\032\022\026\045\040" +
    "\054\030\055\041\056\033\057\027\060\031\061\025\001" +
    "\002\000\042\004\115\021\050\022\043\023\044\024\047" +
    "\025\051\026\061\027\057\030\045\031\062\032\054\033" +
    "\060\034\053\035\055\036\052\037\046\001\002\000\034" +
    "\012\uffee\017\uffee\041\uffee\042\uffee\045\uffee\064\uffee\067" +
    "\uffee\070\uffee\072\uffee\073\uffee\074\uffee\075\uffee\077\uffee" +
    "\001\002\000\010\015\uffe9\043\uffe9\053\uffe9\001\002\000" +
    "\060\003\017\021\050\022\043\023\044\024\047\025\051" +
    "\026\061\027\057\030\045\031\062\032\054\033\060\034" +
    "\053\035\055\036\052\037\046\042\012\045\021\064\023" +
    "\067\013\070\020\071\121\075\016\001\002\000\022\042" +
    "\012\045\021\064\023\067\013\070\020\073\125\074\127" +
    "\075\016\001\002\000\020\003\017\042\012\045\021\064" +
    "\023\067\013\070\020\075\016\001\002\000\020\042\012" +
    "\045\021\064\023\067\013\070\020\072\124\075\016\001" +
    "\002\000\034\012\ufffb\017\ufffb\041\ufffb\042\ufffb\045\ufffb" +
    "\064\ufffb\067\ufffb\070\ufffb\072\ufffb\073\ufffb\074\ufffb\075" +
    "\ufffb\077\ufffb\001\002\000\034\012\ufff6\017\ufff6\041\ufff6" +
    "\042\ufff6\045\ufff6\064\ufff6\067\ufff6\070\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\075\ufff6\077\ufff6\001\002\000\020\003\017" +
    "\042\012\045\021\064\023\067\013\070\020\075\016\001" +
    "\002\000\006\073\133\074\134\001\002\000\026\005\037" +
    "\014\032\022\026\045\040\054\030\055\041\056\033\057" +
    "\027\060\031\061\025\001\002\000\042\021\050\022\043" +
    "\023\044\024\047\025\051\026\061\027\057\030\045\031" +
    "\062\032\054\033\060\034\053\035\055\036\052\037\046" +
    "\071\131\001\002\000\020\003\017\042\012\045\021\064" +
    "\023\067\013\070\020\075\016\001\002\000\022\042\012" +
    "\045\021\064\023\067\013\070\020\073\uffe6\074\uffe6\075" +
    "\016\001\002\000\020\003\017\042\012\045\021\064\023" +
    "\067\013\070\020\075\016\001\002\000\026\005\037\014" +
    "\032\022\026\045\040\054\030\055\041\056\033\057\027" +
    "\060\031\061\025\001\002\000\042\021\050\022\043\023" +
    "\044\024\047\025\051\026\061\027\057\030\045\031\062" +
    "\032\054\033\060\034\053\035\055\036\052\037\046\071" +
    "\136\001\002\000\020\003\017\042\012\045\021\064\023" +
    "\067\013\070\020\075\016\001\002\000\022\042\012\045" +
    "\021\064\023\067\013\070\020\073\uffe7\074\uffe7\075\016" +
    "\001\002\000\020\042\012\045\021\064\023\067\013\070" +
    "\020\072\141\075\016\001\002\000\034\012\ufff4\017\ufff4" +
    "\041\ufff4\042\ufff4\045\ufff4\064\ufff4\067\ufff4\070\ufff4\072" +
    "\ufff4\073\ufff4\074\ufff4\075\ufff4\077\ufff4\001\002\000\020" +
    "\042\012\045\021\064\023\067\013\070\020\072\143\075" +
    "\016\001\002\000\034\012\ufff5\017\ufff5\041\ufff5\042\ufff5" +
    "\045\ufff5\064\ufff5\067\ufff5\070\ufff5\072\ufff5\073\ufff5\074" +
    "\ufff5\075\ufff5\077\ufff5\001\002\000\034\012\ufff9\017\ufff9" +
    "\041\ufff9\042\ufff9\045\ufff9\064\ufff9\067\ufff9\070\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\077\ufff9\001\002\000\042" +
    "\021\050\022\043\023\044\024\047\025\051\026\061\027" +
    "\057\030\045\031\062\032\054\033\060\034\053\035\055" +
    "\036\052\037\046\076\146\001\002\000\004\017\147\001" +
    "\002\000\026\005\037\014\032\022\026\045\040\054\030" +
    "\055\041\056\033\057\027\060\031\061\025\001\002\000" +
    "\010\017\152\073\151\077\153\001\002\000\004\071\160" +
    "\001\002\000\026\005\037\014\032\022\026\045\040\054" +
    "\030\055\041\056\033\057\027\060\031\061\025\001\002" +
    "\000\034\012\uffed\017\uffed\041\uffed\042\uffed\045\uffed\064" +
    "\uffed\067\uffed\070\uffed\072\uffed\073\uffed\074\uffed\075\uffed" +
    "\077\uffed\001\002\000\042\020\155\021\050\022\043\023" +
    "\044\024\047\025\051\026\061\027\057\030\045\031\062" +
    "\032\054\033\060\034\053\035\055\036\052\037\046\001" +
    "\002\000\004\071\156\001\002\000\020\003\017\042\012" +
    "\045\021\064\023\067\013\070\020\075\016\001\002\000" +
    "\024\017\uffeb\042\012\045\021\064\023\067\013\070\020" +
    "\073\uffeb\075\016\077\uffeb\001\002\000\020\003\017\042" +
    "\012\045\021\064\023\067\013\070\020\075\016\001\002" +
    "\000\020\042\012\045\021\064\023\067\013\070\020\075" +
    "\016\077\162\001\002\000\034\012\uffec\017\uffec\041\uffec" +
    "\042\uffec\045\uffec\064\uffec\067\uffec\070\uffec\072\uffec\073" +
    "\uffec\074\uffec\075\uffec\077\uffec\001\002\000\042\020\164" +
    "\021\050\022\043\023\044\024\047\025\051\026\061\027" +
    "\057\030\045\031\062\032\054\033\060\034\053\035\055" +
    "\036\052\037\046\001\002\000\004\071\165\001\002\000" +
    "\020\003\017\042\012\045\021\064\023\067\013\070\020" +
    "\075\016\001\002\000\024\017\uffea\042\012\045\021\064" +
    "\023\067\013\070\020\073\uffea\075\016\077\uffea\001\002" +
    "\000\006\002\ufffc\040\ufffc\001\002\000\026\005\037\014" +
    "\032\022\026\045\040\054\030\055\041\056\033\057\027" +
    "\060\031\061\025\001\002\000\042\006\172\021\050\022" +
    "\043\023\044\024\047\025\051\026\061\027\057\030\045" +
    "\031\062\032\054\033\060\034\053\035\055\036\052\037" +
    "\046\001\002\000\004\011\173\001\002\000\020\003\017" +
    "\042\012\045\021\064\023\067\013\070\020\075\016\001" +
    "\002\000\020\012\175\042\012\045\021\064\023\067\013" +
    "\070\020\075\016\001\002\000\034\012\ufff7\017\ufff7\041" +
    "\ufff7\042\ufff7\045\ufff7\064\ufff7\067\ufff7\070\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\075\ufff7\077\ufff7\001\002\000\006\015" +
    "\112\043\177\001\002\000\014\046\202\047\200\050\201" +
    "\051\203\052\204\001\002\000\004\044\221\001\002\000" +
    "\004\044\216\001\002\000\004\044\213\001\002\000\004" +
    "\044\210\001\002\000\004\044\205\001\002\000\026\005" +
    "\037\014\032\022\026\045\040\054\030\055\041\056\033" +
    "\057\027\060\031\061\025\001\002\000\042\004\207\021" +
    "\050\022\043\023\044\024\047\025\051\026\061\027\057" +
    "\030\045\031\062\032\054\033\060\034\053\035\055\036" +
    "\052\037\046\001\002\000\034\012\uffef\017\uffef\041\uffef" +
    "\042\uffef\045\uffef\064\uffef\067\uffef\070\uffef\072\uffef\073" +
    "\uffef\074\uffef\075\uffef\077\uffef\001\002\000\026\005\037" +
    "\014\032\022\026\045\040\054\030\055\041\056\033\057" +
    "\027\060\031\061\025\001\002\000\042\004\212\021\050" +
    "\022\043\023\044\024\047\025\051\026\061\027\057\030" +
    "\045\031\062\032\054\033\060\034\053\035\055\036\052" +
    "\037\046\001\002\000\034\012\ufff0\017\ufff0\041\ufff0\042" +
    "\ufff0\045\ufff0\064\ufff0\067\ufff0\070\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\077\ufff0\001\002\000\026\005\037\014" +
    "\032\022\026\045\040\054\030\055\041\056\033\057\027" +
    "\060\031\061\025\001\002\000\042\004\215\021\050\022" +
    "\043\023\044\024\047\025\051\026\061\027\057\030\045" +
    "\031\062\032\054\033\060\034\053\035\055\036\052\037" +
    "\046\001\002\000\034\012\ufff3\017\ufff3\041\ufff3\042\ufff3" +
    "\045\ufff3\064\ufff3\067\ufff3\070\ufff3\072\ufff3\073\ufff3\074" +
    "\ufff3\075\ufff3\077\ufff3\001\002\000\026\005\037\014\032" +
    "\022\026\045\040\054\030\055\041\056\033\057\027\060" +
    "\031\061\025\001\002\000\042\004\220\021\050\022\043" +
    "\023\044\024\047\025\051\026\061\027\057\030\045\031" +
    "\062\032\054\033\060\034\053\035\055\036\052\037\046" +
    "\001\002\000\034\012\ufff1\017\ufff1\041\ufff1\042\ufff1\045" +
    "\ufff1\064\ufff1\067\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1" +
    "\075\ufff1\077\ufff1\001\002\000\026\005\037\014\032\022" +
    "\026\045\040\054\030\055\041\056\033\057\027\060\031" +
    "\061\025\001\002\000\042\004\223\021\050\022\043\023" +
    "\044\024\047\025\051\026\061\027\057\030\045\031\062" +
    "\032\054\033\060\034\053\035\055\036\052\037\046\001" +
    "\002\000\034\012\ufff2\017\ufff2\041\ufff2\042\ufff2\045\ufff2" +
    "\064\ufff2\067\ufff2\070\ufff2\072\ufff2\073\ufff2\074\ufff2\075" +
    "\ufff2\077\ufff2\001\002\000\006\002\ufffd\040\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\003\004\007\005\005\001\001\000" +
    "\002\001\001\000\004\005\223\001\001\000\002\001\001" +
    "\000\010\003\013\006\014\013\021\001\001\000\004\005" +
    "\010\001\001\000\002\001\001\000\004\013\175\001\001" +
    "\000\002\001\001\000\006\006\122\013\021\001\001\000" +
    "\002\001\001\000\010\007\035\010\144\014\033\001\001" +
    "\000\006\006\143\013\021\001\001\000\010\007\035\010" +
    "\116\014\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\034\014\033\001" +
    "\001\000\002\001\001\000\010\007\035\010\110\014\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\035\010" +
    "\041\014\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\100\014\033\001" +
    "\001\000\010\007\035\010\077\014\033\001\001\000\010" +
    "\007\035\010\076\014\033\001\001\000\010\007\035\010" +
    "\075\014\033\001\001\000\010\007\035\010\074\014\033" +
    "\001\001\000\010\007\035\010\073\014\033\001\001\000" +
    "\010\007\035\010\072\014\033\001\001\000\010\007\035" +
    "\010\071\014\033\001\001\000\010\007\035\010\070\014" +
    "\033\001\001\000\010\007\035\010\067\014\033\001\001" +
    "\000\010\007\035\010\066\014\033\001\001\000\002\001" +
    "\001\000\010\007\035\010\065\014\033\001\001\000\010" +
    "\007\035\010\064\014\033\001\001\000\010\007\035\010" +
    "\063\014\033\001\001\000\010\007\035\010\062\014\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\035\010\113" +
    "\014\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\117\006\014\013\021\001\001" +
    "\000\010\006\122\011\125\013\021\001\001\000\010\003" +
    "\121\006\014\013\021\001\001\000\006\006\122\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\141\006\014\013\021\001\001\000\002\001\001\000\010" +
    "\007\035\010\127\014\033\001\001\000\002\001\001\000" +
    "\010\003\131\006\014\013\021\001\001\000\006\006\122" +
    "\013\021\001\001\000\010\003\137\006\014\013\021\001" +
    "\001\000\010\007\035\010\134\014\033\001\001\000\002" +
    "\001\001\000\010\003\136\006\014\013\021\001\001\000" +
    "\006\006\122\013\021\001\001\000\006\006\122\013\021" +
    "\001\001\000\002\001\001\000\006\006\122\013\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\147\001\001\000\010\007\035\010\162\014" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\035\010\153\014\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\156\006\014" +
    "\013\021\001\001\000\006\006\122\013\021\001\001\000" +
    "\010\003\160\006\014\013\021\001\001\000\006\006\122" +
    "\013\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\165\006\014\013\021\001\001" +
    "\000\006\006\122\013\021\001\001\000\002\001\001\000" +
    "\010\007\035\010\170\014\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\173\006\014\013\021\001" +
    "\001\000\006\006\122\013\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\035\010\205\014\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\035\010\210" +
    "\014\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\035\010\213\014\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\216\014\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\035" +
    "\010\221\014\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Interfaz.Principal.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public Arbol getArbol() {
        return arbol;
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se definió dentro del parser
                                                    parser.AST=a.getInstructions();
                                                    Nodo NODERAIZ = new Nodo("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= globales global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones Globales"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globales ::= global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globales ::= error global 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global ::= RINICIO instrucciones RFIN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Main(a.getInstructions()));
                                                    RESULT.addSon("inicio");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("fin");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("global",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instrucciones instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error instruccion 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= REVALUAR CORIZQ expresion_relacional CORDER PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Evaluar((Operacion)a.getIns()));
                                                    RESULT.addSon("EVALUAR");
                                                    RESULT.addSon("[");
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("]");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= RMIENTRAS PARIZQ expresion_relacional PARDER LLAVIZQ instrucciones LLAVDER 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                        RESULT=new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(), b.getInstructions()));
                                                                                        RESULT.addSon("MIENTRAS");
                                                                                        RESULT.addSon("(");
                                                                                        RESULT.addSon(a);
                                                                                        RESULT.addSon(")");
                                                                                        RESULT.addSon("{");
                                                                                        RESULT.addSon(b);
                                                                                        RESULT.addSon("}");
                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RSI expresion_relacional RENTONCES instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("SI");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon("entonces");
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= RSI expresion_relacional instrucciones RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                             RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");   
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= RSI expresion_relacional instrucciones else_ifs RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon(l);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RINGRESAR listaVariables RCOMO NUMDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("numero");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= RINGRESAR listaVariables RCOMO FLOATDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("float");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= RINGRESAR listaVariables RCOMO CADDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CADENA, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("cadena");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= RINGRESAR listaVariables RCOMO BOOLDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.BOOLEAN, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("boolean");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= RINGRESAR listaVariables RCOMO CARDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CARACTER, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("caracter");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= listaVariables FLECHAASIGN expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Asignacion"), new Asignacion(a, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= RSEGUN expresion_relacional RHACER cases RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= RSEGUN expresion_relacional RHACER cases RELSE RENTONCES instrucciones RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions(),c.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("else");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cases ::= cases INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Casos"), l.getInstructions());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cases ::= INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Case"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaVariables ::= listaVariables COMA NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a +"," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaVariables ::= NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // else_ifs ::= else_ifs ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("O_SI's"), l.getInstructions());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(), If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("ELSE");
                                                                                                        RESULT.addSon("IF");
                                                                                                        RESULT.addSon("(");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(")");
                                                                                                        RESULT.addSon("{");
                                                                                                        RESULT.addSon(b);
                                                                                                        RESULT.addSon("}");
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // else_ifs ::= ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("O_SI"), new LinkedList<>());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon("O_SI");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_relacional ::= expresion_relacional RMAYOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_relacional ::= expresion_relacional RMENOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_relacional ::= expresion_relacional RMAYORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_relacional ::= expresion_relacional RMENORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_relacional ::= expresion_relacional RIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.IGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_relacional ::= expresion_relacional RDIFERENTE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.DIFERENTE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("diferente");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_relacional ::= expresion_relacional RAND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.AND));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("and");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_relacional ::= expresion_relacional ROR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.OR));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("or");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_relacional ::= expresion_relacional RNOT expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOT));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("not");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_relacional ::= expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = a;
                                                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(a);                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion_relacional MAS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("+");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion_relacional MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion_relacional POR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("*");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion_relacional DIVIDIDO expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("/");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion_relacional RPOTENCIA expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("potencia");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion_relacional RMOD expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mod");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= PARIZQ expresion_relacional PARDER 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.PARENTESIS));
                                                    RESULT.addSon("(");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(")");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion_valor 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                 RESULT= a ;
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_valor ::= RVERDADERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                   RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_valor ::= RFALSO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                     RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_valor ::= NOMVARIABLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_valor ::= ENTERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_valor ::= DECIMAL 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));          
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_valor ::= STRING 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CADENA));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_valor ::= CHAR 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CARACTER));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_valor ::= COMSIMPLE DOLAR LLAVIZQ ENTERO LLAVDER COMSIMPLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion(d,Operacion.Tipo_operacion.CARACTER));
                                                    RESULT.addSon(a+b+c+d+e+f);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
