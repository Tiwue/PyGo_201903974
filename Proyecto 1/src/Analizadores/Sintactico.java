
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Produccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.If;
import Estructuras.Instrucciones.While;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.Declaracion;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Switch;
import Estructuras.Instrucciones.Case;
import Estructuras.Instrucciones.Main;
import Estructuras.Instrucciones.For;
import Estructuras.Instrucciones.DoWhile;
import Estructuras.Instrucciones.Return;
import Estructuras.Instrucciones.Metodo;
import Estructuras.Instrucciones.Parametro;
import java.util.LinkedList;
import Estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\006\007\000\002\006\011\000\002\006\011\000\002" +
    "\006\011\000\002\006\011\000\002\006\011\000\002\006" +
    "\006\000\002\006\013\000\002\006\012\000\002\006\016" +
    "\000\002\006\015\000\002\006\007\000\002\006\006\000" +
    "\002\006\006\000\002\006\005\000\002\006\003\000\002" +
    "\006\006\000\002\006\012\000\002\017\006\000\002\017" +
    "\006\000\002\017\006\000\002\017\006\000\002\017\006" +
    "\000\002\017\004\000\002\017\004\000\002\020\002\000" +
    "\002\021\002\000\002\017\012\000\002\015\007\000\002" +
    "\015\010\000\002\015\011\000\002\015\007\000\002\015" +
    "\012\000\002\012\010\000\002\012\007\000\002\013\005" +
    "\000\002\013\003\000\002\016\005\000\002\016\005\000" +
    "\002\011\007\000\002\011\006\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\003\000\002\007\004\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\003\005\040\007\001\002\000\004\002" +
    "\307\001\002\000\004\040\007\001\002\000\006\002\ufffe" +
    "\040\ufffe\001\002\000\026\003\022\042\013\045\025\065" +
    "\026\070\015\071\023\076\020\101\024\107\014\112\012" +
    "\001\002\000\006\002\000\040\007\001\002\000\006\002" +
    "\uffff\040\uffff\001\002\000\004\057\254\001\002\000\004" +
    "\045\025\001\002\000\030\003\022\042\013\045\025\065" +
    "\026\070\015\071\023\076\020\101\024\107\014\110\222" +
    "\112\012\001\002\000\026\005\044\014\040\022\033\045" +
    "\045\054\035\055\046\056\037\060\034\061\036\062\032" +
    "\001\002\000\026\041\213\042\013\045\025\065\026\070" +
    "\015\071\023\076\020\101\024\107\014\112\012\001\002" +
    "\000\050\017\ufffa\041\ufffa\042\ufffa\045\ufffa\065\ufffa\070" +
    "\ufffa\071\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\100\ufffa" +
    "\101\ufffa\103\ufffa\106\ufffa\107\ufffa\110\ufffa\112\ufffa\113" +
    "\ufffa\001\002\000\026\005\044\014\040\022\033\045\045" +
    "\054\035\055\046\056\037\060\034\061\036\062\032\001" +
    "\002\000\050\017\uffe9\041\uffe9\042\uffe9\045\uffe9\065\uffe9" +
    "\070\uffe9\071\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\100" +
    "\uffe9\101\uffe9\103\uffe9\106\uffe9\107\uffe9\110\uffe9\112\uffe9" +
    "\113\uffe9\001\002\000\024\042\013\045\025\065\026\070" +
    "\015\071\023\076\020\101\024\107\014\112\012\001\002" +
    "\000\026\005\044\014\040\022\033\045\045\054\035\055" +
    "\046\056\037\060\034\061\036\062\032\001\002\000\026" +
    "\005\044\014\040\022\033\045\045\054\035\055\046\056" +
    "\037\060\034\061\036\062\032\001\002\000\010\015\uffd4" +
    "\043\uffd4\053\uffd4\001\002\000\004\007\117\001\002\000" +
    "\006\015\030\053\031\001\002\000\004\045\116\001\002" +
    "\000\026\005\044\014\040\022\033\045\045\054\035\055" +
    "\046\056\037\060\034\061\036\062\032\001\002\000\132" +
    "\003\uffb8\004\uffb8\006\uffb8\010\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\041\uffb8\042\uffb8\045\uffb8\053\uffb8\065\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8" +
    "\106\uffb8\107\uffb8\110\uffb8\112\uffb8\113\uffb8\001\002\000" +
    "\026\005\044\014\040\022\033\045\045\054\035\055\046" +
    "\056\037\060\034\061\036\062\032\001\002\000\132\003" +
    "\uffbc\004\uffbc\006\uffbc\010\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\041\uffbc\042\uffbc\045\uffbc\053\uffbc\065\uffbc\070" +
    "\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\106" +
    "\uffbc\107\uffbc\110\uffbc\112\uffbc\113\uffbc\001\002\000\132" +
    "\003\uffb9\004\uffb9\006\uffb9\010\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\041\uffb9\042\uffb9\045\uffb9\053\uffb9\065\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\106\uffb9\107\uffb9\110\uffb9\112\uffb9\113\uffb9\001\002\000" +
    "\132\003\uffbb\004\uffbb\006\uffbb\010\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\037\uffbb\041\uffbb\042\uffbb\045\uffbb\053\uffbb\065" +
    "\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb" +
    "\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104" +
    "\uffbb\106\uffbb\107\uffbb\110\uffbb\112\uffbb\113\uffbb\001\002" +
    "\000\132\003\uffb7\004\uffb7\006\uffb7\010\uffb7\017\uffb7\020" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\045\uffb7\053\uffb7" +
    "\065\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075" +
    "\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\104\uffb7\106\uffb7\107\uffb7\110\uffb7\112\uffb7\113\uffb7\001" +
    "\002\000\004\013\110\001\002\000\132\003\uffbd\004\uffbd" +
    "\006\uffbd\010\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\041" +
    "\uffbd\042\uffbd\045\uffbd\053\uffbd\065\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\106\uffbd\107\uffbd" +
    "\110\uffbd\112\uffbd\113\uffbd\001\002\000\042\004\107\021" +
    "\055\022\050\023\051\024\053\025\057\026\065\027\064" +
    "\030\054\031\067\032\061\033\066\034\060\035\063\036" +
    "\056\037\052\001\002\000\132\003\uffc6\004\uffc6\006\uffc6" +
    "\010\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\041\uffc6\042" +
    "\uffc6\045\uffc6\053\uffc6\065\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\102\uffc6\103\uffc6\104\uffc6\106\uffc6\107\uffc6\110\uffc6" +
    "\112\uffc6\113\uffc6\001\002\000\026\005\044\014\040\022" +
    "\033\045\045\054\035\055\046\056\037\060\034\061\036" +
    "\062\032\001\002\000\132\003\uffba\004\uffba\006\uffba\010" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\041\uffba\042\uffba" +
    "\045\uffba\053\uffba\065\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba" +
    "\102\uffba\103\uffba\104\uffba\106\uffba\107\uffba\110\uffba\112" +
    "\uffba\113\uffba\001\002\000\132\003\uffb6\004\uffb6\006\uffb6" +
    "\010\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\041\uffb6\042" +
    "\uffb6\045\uffb6\053\uffb6\065\uffb6\070\uffb6\071\uffb6\072\uffb6" +
    "\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\106\uffb6\107\uffb6\110\uffb6" +
    "\112\uffb6\113\uffb6\001\002\000\042\006\062\021\055\022" +
    "\050\023\051\024\053\025\057\026\065\027\064\030\054" +
    "\031\067\032\061\033\066\034\060\035\063\036\056\037" +
    "\052\001\002\000\026\005\044\014\040\022\033\045\045" +
    "\054\035\055\046\056\037\060\034\061\036\062\032\001" +
    "\002\000\026\005\044\014\040\022\033\045\045\054\035" +
    "\055\046\056\037\060\034\061\036\062\032\001\002\000" +
    "\026\005\044\014\040\022\033\045\045\054\035\055\046" +
    "\056\037\060\034\061\036\062\032\001\002\000\026\005" +
    "\044\014\040\022\033\045\045\054\035\055\046\056\037" +
    "\060\034\061\036\062\032\001\002\000\026\005\044\014" +
    "\040\022\033\045\045\054\035\055\046\056\037\060\034" +
    "\061\036\062\032\001\002\000\026\005\044\014\040\022" +
    "\033\045\045\054\035\055\046\056\037\060\034\061\036" +
    "\062\032\001\002\000\026\005\044\014\040\022\033\045" +
    "\045\054\035\055\046\056\037\060\034\061\036\062\032" +
    "\001\002\000\026\005\044\014\040\022\033\045\045\054" +
    "\035\055\046\056\037\060\034\061\036\062\032\001\002" +
    "\000\026\005\044\014\040\022\033\045\045\054\035\055" +
    "\046\056\037\060\034\061\036\062\032\001\002\000\026" +
    "\005\044\014\040\022\033\045\045\054\035\055\046\056" +
    "\037\060\034\061\036\062\032\001\002\000\132\003\uffbe" +
    "\004\uffbe\006\uffbe\010\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\041\uffbe\042\uffbe\045\uffbe\053\uffbe\065\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\106\uffbe" +
    "\107\uffbe\110\uffbe\112\uffbe\113\uffbe\001\002\000\026\005" +
    "\044\014\040\022\033\045\045\054\035\055\046\056\037" +
    "\060\034\061\036\062\032\001\002\000\026\005\044\014" +
    "\040\022\033\045\045\054\035\055\046\056\037\060\034" +
    "\061\036\062\032\001\002\000\026\005\044\014\040\022" +
    "\033\045\045\054\035\055\046\056\037\060\034\061\036" +
    "\062\032\001\002\000\026\005\044\014\040\022\033\045" +
    "\045\054\035\055\046\056\037\060\034\061\036\062\032" +
    "\001\002\000\026\005\044\014\040\022\033\045\045\054" +
    "\035\055\046\056\037\060\034\061\036\062\032\001\002" +
    "\000\132\003\uffcd\004\uffcd\006\uffcd\010\uffcd\017\uffcd\020" +
    "\uffcd\021\055\022\050\023\051\024\053\025\057\026\065" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\045\uffcd\053\uffcd" +
    "\065\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075" +
    "\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd" +
    "\104\uffcd\106\uffcd\107\uffcd\110\uffcd\112\uffcd\113\uffcd\001" +
    "\002\000\132\003\uffcb\004\uffcb\006\uffcb\010\uffcb\017\uffcb" +
    "\020\uffcb\021\055\022\050\023\051\024\053\025\057\026" +
    "\065\027\064\030\054\031\067\032\061\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\045\uffcb\053" +
    "\uffcb\065\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\106\uffcb\107\uffcb\110\uffcb\112\uffcb\113\uffcb" +
    "\001\002\000\132\003\uffbf\004\uffbf\006\uffbf\010\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\057" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\045\uffbf" +
    "\053\uffbf\065\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf" +
    "\103\uffbf\104\uffbf\106\uffbf\107\uffbf\110\uffbf\112\uffbf\113" +
    "\uffbf\001\002\000\132\003\uffcf\004\uffcf\006\uffcf\010\uffcf" +
    "\017\uffcf\020\uffcf\021\055\022\050\023\051\024\053\025" +
    "\057\026\065\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\045" +
    "\uffcf\053\uffcf\065\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\104\uffcf\106\uffcf\107\uffcf\110\uffcf\112\uffcf" +
    "\113\uffcf\001\002\000\132\003\uffc8\004\uffc8\006\uffc8\010" +
    "\uffc8\017\uffc8\020\uffc8\021\055\022\050\023\051\024\053" +
    "\025\057\026\065\027\064\030\054\031\067\032\061\033" +
    "\066\034\060\035\uffc8\036\056\037\052\041\uffc8\042\uffc8" +
    "\045\uffc8\053\uffc8\065\uffc8\070\uffc8\071\uffc8\072\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\102\uffc8\103\uffc8\104\uffc8\106\uffc8\107\uffc8\110\uffc8\112" +
    "\uffc8\113\uffc8\001\002\000\132\003\uffcc\004\uffcc\006\uffcc" +
    "\010\uffcc\017\uffcc\020\uffcc\021\055\022\050\023\051\024" +
    "\053\025\057\026\065\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042" +
    "\uffcc\045\uffcc\053\uffcc\065\uffcc\070\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\104\uffcc\106\uffcc\107\uffcc\110\uffcc" +
    "\112\uffcc\113\uffcc\001\002\000\132\003\uffca\004\uffca\006" +
    "\uffca\010\uffca\017\uffca\020\uffca\021\055\022\050\023\051" +
    "\024\053\025\057\026\065\027\064\030\054\031\067\032" +
    "\061\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\041\uffca" +
    "\042\uffca\045\uffca\053\uffca\065\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca" +
    "\101\uffca\102\uffca\103\uffca\104\uffca\106\uffca\107\uffca\110" +
    "\uffca\112\uffca\113\uffca\001\002\000\132\003\uffc0\004\uffc0" +
    "\006\uffc0\010\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\057\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\045\uffc0\053\uffc0\065\uffc0\070\uffc0\071\uffc0" +
    "\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\106\uffc0\107\uffc0" +
    "\110\uffc0\112\uffc0\113\uffc0\001\002\000\132\003\uffc9\004" +
    "\uffc9\006\uffc9\010\uffc9\017\uffc9\020\uffc9\021\055\022\050" +
    "\023\051\024\053\025\057\026\065\027\064\030\054\031" +
    "\067\032\061\033\066\034\060\035\uffc9\036\uffc9\037\052" +
    "\041\uffc9\042\uffc9\045\uffc9\053\uffc9\065\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106\uffc9\107" +
    "\uffc9\110\uffc9\112\uffc9\113\uffc9\001\002\000\132\003\uffc4" +
    "\004\uffc4\006\uffc4\010\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\051\024\053\025\057\026\065\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\041\uffc4\042\uffc4\045\uffc4\053\uffc4\065\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\106\uffc4" +
    "\107\uffc4\110\uffc4\112\uffc4\113\uffc4\001\002\000\132\003" +
    "\uffce\004\uffce\006\uffce\010\uffce\017\uffce\020\uffce\021\055" +
    "\022\050\023\051\024\053\025\057\026\065\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\041\uffce\042\uffce\045\uffce\053\uffce\065\uffce\070" +
    "\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce" +
    "\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\106" +
    "\uffce\107\uffce\110\uffce\112\uffce\113\uffce\001\002\000\132" +
    "\003\uffc1\004\uffc1\006\uffc1\010\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\057\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\041\uffc1\042\uffc1\045\uffc1\053\uffc1\065\uffc1" +
    "\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\112\uffc1\113\uffc1\001\002\000" +
    "\132\003\uffc7\004\uffc7\006\uffc7\010\uffc7\017\uffc7\020\uffc7" +
    "\021\055\022\050\023\051\024\053\025\057\026\065\027" +
    "\064\030\054\031\067\032\061\033\066\034\060\035\uffc7" +
    "\036\uffc7\037\052\041\uffc7\042\uffc7\045\uffc7\053\uffc7\065" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\076\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104" +
    "\uffc7\106\uffc7\107\uffc7\110\uffc7\112\uffc7\113\uffc7\001\002" +
    "\000\132\003\uffc2\004\uffc2\006\uffc2\010\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\057\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2\045\uffc2\053\uffc2" +
    "\065\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2" +
    "\104\uffc2\106\uffc2\107\uffc2\110\uffc2\112\uffc2\113\uffc2\001" +
    "\002\000\132\003\uffc3\004\uffc3\006\uffc3\010\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\051\024\053\025\057\026" +
    "\065\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3\045\uffc3\053" +
    "\uffc3\065\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103" +
    "\uffc3\104\uffc3\106\uffc3\107\uffc3\110\uffc3\112\uffc3\113\uffc3" +
    "\001\002\000\050\017\ufff2\041\ufff2\042\ufff2\045\ufff2\065" +
    "\ufff2\070\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\100\ufff2\101\ufff2\103\ufff2\106\ufff2\107\ufff2\110\ufff2\112" +
    "\ufff2\113\ufff2\001\002\000\004\011\111\001\002\000\004" +
    "\054\112\001\002\000\004\012\113\001\002\000\004\014" +
    "\114\001\002\000\132\003\uffb5\004\uffb5\006\uffb5\010\uffb5" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5\045" +
    "\uffb5\053\uffb5\065\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102" +
    "\uffb5\103\uffb5\104\uffb5\106\uffb5\107\uffb5\110\uffb5\112\uffb5" +
    "\113\uffb5\001\002\000\132\003\uffc5\004\uffc5\006\uffc5\010" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5" +
    "\045\uffc5\053\uffc5\065\uffc5\070\uffc5\071\uffc5\072\uffc5\073" +
    "\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5" +
    "\102\uffc5\103\uffc5\104\uffc5\106\uffc5\107\uffc5\110\uffc5\112" +
    "\uffc5\113\uffc5\001\002\000\010\015\uffd5\043\uffd5\053\uffd5" +
    "\001\002\000\026\005\044\014\040\022\033\045\045\054" +
    "\035\055\046\056\037\060\034\061\036\062\032\001\002" +
    "\000\042\010\121\021\055\022\050\023\051\024\053\025" +
    "\057\026\065\027\064\030\054\031\067\032\061\033\066" +
    "\034\060\035\063\036\056\037\052\001\002\000\004\004" +
    "\122\001\002\000\050\017\ufff8\041\ufff8\042\ufff8\045\ufff8" +
    "\065\ufff8\070\ufff8\071\ufff8\073\ufff8\074\ufff8\075\ufff8\076" +
    "\ufff8\100\ufff8\101\ufff8\103\ufff8\106\ufff8\107\ufff8\110\ufff8" +
    "\112\ufff8\113\ufff8\001\002\000\042\021\055\022\050\023" +
    "\051\024\053\025\057\026\065\027\064\030\054\031\067" +
    "\032\061\033\066\034\060\035\063\036\056\037\052\053" +
    "\124\001\002\000\026\005\044\014\040\022\033\045\045" +
    "\054\035\055\046\056\037\060\034\061\036\062\032\001" +
    "\002\000\042\021\055\022\050\023\051\024\053\025\057" +
    "\026\065\027\064\030\054\031\067\032\061\033\066\034" +
    "\060\035\063\036\056\037\052\102\126\001\002\000\026" +
    "\005\044\014\040\022\033\045\045\054\035\055\046\056" +
    "\037\060\034\061\036\062\032\001\002\000\044\021\055" +
    "\022\050\023\051\024\053\025\057\026\065\027\064\030" +
    "\054\031\067\032\061\033\066\034\060\035\063\036\056" +
    "\037\052\077\131\104\130\001\002\000\004\105\136\001" +
    "\002\000\030\003\022\042\013\045\025\065\026\070\015" +
    "\071\023\076\020\101\024\103\132\107\014\112\012\001" +
    "\002\000\050\017\ufff0\041\ufff0\042\ufff0\045\ufff0\065\ufff0" +
    "\070\ufff0\071\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\100" +
    "\ufff0\101\ufff0\103\ufff0\106\ufff0\107\ufff0\110\ufff0\112\ufff0" +
    "\113\ufff0\001\002\000\026\042\013\045\025\065\026\070" +
    "\015\071\023\076\020\101\024\103\134\107\014\112\012" +
    "\001\002\000\050\017\ufff1\041\ufff1\042\ufff1\045\ufff1\065" +
    "\ufff1\070\ufff1\071\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1" +
    "\100\ufff1\101\ufff1\103\ufff1\106\ufff1\107\ufff1\110\ufff1\112" +
    "\ufff1\113\ufff1\001\002\000\050\017\ufffb\041\ufffb\042\ufffb" +
    "\045\ufffb\065\ufffb\070\ufffb\071\ufffb\073\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\100\ufffb\101\ufffb\103\ufffb\106\ufffb\107\ufffb" +
    "\110\ufffb\112\ufffb\113\ufffb\001\002\000\026\005\044\014" +
    "\040\022\033\045\045\054\035\055\046\056\037\060\034" +
    "\061\036\062\032\001\002\000\042\021\055\022\050\023" +
    "\051\024\053\025\057\026\065\027\064\030\054\031\067" +
    "\032\061\033\066\034\060\035\063\036\056\037\052\077" +
    "\140\001\002\000\030\003\022\042\013\045\025\065\026" +
    "\070\015\071\023\076\020\101\024\103\141\107\014\112" +
    "\012\001\002\000\050\017\uffee\041\uffee\042\uffee\045\uffee" +
    "\065\uffee\070\uffee\071\uffee\073\uffee\074\uffee\075\uffee\076" +
    "\uffee\100\uffee\101\uffee\103\uffee\106\uffee\107\uffee\110\uffee" +
    "\112\uffee\113\uffee\001\002\000\026\042\013\045\025\065" +
    "\026\070\015\071\023\076\020\101\024\103\143\107\014" +
    "\112\012\001\002\000\050\017\uffef\041\uffef\042\uffef\045" +
    "\uffef\065\uffef\070\uffef\071\uffef\073\uffef\074\uffef\075\uffef" +
    "\076\uffef\100\uffef\101\uffef\103\uffef\106\uffef\107\uffef\110" +
    "\uffef\112\uffef\113\uffef\001\002\000\066\003\022\021\055" +
    "\022\050\023\051\024\053\025\057\026\065\027\064\030" +
    "\054\031\067\032\061\033\066\034\060\035\063\036\056" +
    "\037\052\042\013\045\025\065\026\070\015\071\023\072" +
    "\146\076\020\101\024\107\014\112\012\001\002\000\030" +
    "\042\013\045\025\065\026\070\015\071\023\074\151\075" +
    "\153\076\020\101\024\107\014\112\012\001\002\000\026" +
    "\003\022\042\013\045\025\065\026\070\015\071\023\076" +
    "\020\101\024\107\014\112\012\001\002\000\026\042\013" +
    "\045\025\065\026\070\015\071\023\073\150\076\020\101" +
    "\024\107\014\112\012\001\002\000\050\017\uffdc\041\uffdc" +
    "\042\uffdc\045\uffdc\065\uffdc\070\uffdc\071\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\076\uffdc\100\uffdc\101\uffdc\103\uffdc\106\uffdc" +
    "\107\uffdc\110\uffdc\112\uffdc\113\uffdc\001\002\000\026\003" +
    "\022\042\013\045\025\065\026\070\015\071\023\076\020" +
    "\101\024\107\014\112\012\001\002\000\006\074\157\075" +
    "\160\001\002\000\026\005\044\014\040\022\033\045\045" +
    "\054\035\055\046\056\037\060\034\061\036\062\032\001" +
    "\002\000\042\021\055\022\050\023\051\024\053\025\057" +
    "\026\065\027\064\030\054\031\067\032\061\033\066\034" +
    "\060\035\063\036\056\037\052\072\155\001\002\000\026" +
    "\003\022\042\013\045\025\065\026\070\015\071\023\076" +
    "\020\101\024\107\014\112\012\001\002\000\030\042\013" +
    "\045\025\065\026\070\015\071\023\074\uffd0\075\uffd0\076" +
    "\020\101\024\107\014\112\012\001\002\000\026\003\022" +
    "\042\013\045\025\065\026\070\015\071\023\076\020\101" +
    "\024\107\014\112\012\001\002\000\026\005\044\014\040" +
    "\022\033\045\045\054\035\055\046\056\037\060\034\061" +
    "\036\062\032\001\002\000\042\021\055\022\050\023\051" +
    "\024\053\025\057\026\065\027\064\030\054\031\067\032" +
    "\061\033\066\034\060\035\063\036\056\037\052\072\162" +
    "\001\002\000\026\003\022\042\013\045\025\065\026\070" +
    "\015\071\023\076\020\101\024\107\014\112\012\001\002" +
    "\000\030\042\013\045\025\065\026\070\015\071\023\074" +
    "\uffd1\075\uffd1\076\020\101\024\107\014\112\012\001\002" +
    "\000\026\042\013\045\025\065\026\070\015\071\023\073" +
    "\165\076\020\101\024\107\014\112\012\001\002\000\050" +
    "\017\uffda\041\uffda\042\uffda\045\uffda\065\uffda\070\uffda\071" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\100\uffda\101\uffda" +
    "\103\uffda\106\uffda\107\uffda\110\uffda\112\uffda\113\uffda\001" +
    "\002\000\026\042\013\045\025\065\026\070\015\071\023" +
    "\073\167\076\020\101\024\107\014\112\012\001\002\000" +
    "\050\017\uffdb\041\uffdb\042\uffdb\045\uffdb\065\uffdb\070\uffdb" +
    "\071\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\100\uffdb\101" +
    "\uffdb\103\uffdb\106\uffdb\107\uffdb\110\uffdb\112\uffdb\113\uffdb" +
    "\001\002\000\050\017\ufff9\041\ufff9\042\ufff9\045\ufff9\065" +
    "\ufff9\070\ufff9\071\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\100\ufff9\101\ufff9\103\ufff9\106\ufff9\107\ufff9\110\ufff9\112" +
    "\ufff9\113\ufff9\001\002\000\042\021\055\022\050\023\051" +
    "\024\053\025\057\026\065\027\064\030\054\031\067\032" +
    "\061\033\066\034\060\035\063\036\056\037\052\077\172" +
    "\001\002\000\004\017\173\001\002\000\026\005\044\014" +
    "\040\022\033\045\045\054\035\055\046\056\037\060\034" +
    "\061\036\062\032\001\002\000\010\017\176\074\175\100" +
    "\177\001\002\000\004\072\204\001\002\000\026\005\044" +
    "\014\040\022\033\045\045\054\035\055\046\056\037\060" +
    "\034\061\036\062\032\001\002\000\050\017\uffd9\041\uffd9" +
    "\042\uffd9\045\uffd9\065\uffd9\070\uffd9\071\uffd9\073\uffd9\074" +
    "\uffd9\075\uffd9\076\uffd9\100\uffd9\101\uffd9\103\uffd9\106\uffd9" +
    "\107\uffd9\110\uffd9\112\uffd9\113\uffd9\001\002\000\042\020" +
    "\201\021\055\022\050\023\051\024\053\025\057\026\065" +
    "\027\064\030\054\031\067\032\061\033\066\034\060\035" +
    "\063\036\056\037\052\001\002\000\004\072\202\001\002" +
    "\000\026\003\022\042\013\045\025\065\026\070\015\071" +
    "\023\076\020\101\024\107\014\112\012\001\002\000\032" +
    "\017\uffd7\042\013\045\025\065\026\070\015\071\023\074" +
    "\uffd7\076\020\100\uffd7\101\024\107\014\112\012\001\002" +
    "\000\026\003\022\042\013\045\025\065\026\070\015\071" +
    "\023\076\020\101\024\107\014\112\012\001\002\000\026" +
    "\042\013\045\025\065\026\070\015\071\023\076\020\100" +
    "\206\101\024\107\014\112\012\001\002\000\050\017\uffd8" +
    "\041\uffd8\042\uffd8\045\uffd8\065\uffd8\070\uffd8\071\uffd8\073" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\100\uffd8\101\uffd8\103\uffd8" +
    "\106\uffd8\107\uffd8\110\uffd8\112\uffd8\113\uffd8\001\002\000" +
    "\042\020\210\021\055\022\050\023\051\024\053\025\057" +
    "\026\065\027\064\030\054\031\067\032\061\033\066\034" +
    "\060\035\063\036\056\037\052\001\002\000\004\072\211" +
    "\001\002\000\026\003\022\042\013\045\025\065\026\070" +
    "\015\071\023\076\020\101\024\107\014\112\012\001\002" +
    "\000\032\017\uffd6\042\013\045\025\065\026\070\015\071" +
    "\023\074\uffd6\076\020\100\uffd6\101\024\107\014\112\012" +
    "\001\002\000\006\002\ufffc\040\ufffc\001\002\000\042\021" +
    "\055\022\050\023\051\024\053\025\057\026\065\027\064" +
    "\030\054\031\067\032\061\033\066\034\060\035\063\036" +
    "\056\037\052\077\215\001\002\000\030\003\022\042\013" +
    "\045\025\065\026\070\015\071\023\076\020\101\024\106" +
    "\216\107\014\112\012\001\002\000\050\017\uffec\041\uffec" +
    "\042\uffec\045\uffec\065\uffec\070\uffec\071\uffec\073\uffec\074" +
    "\uffec\075\uffec\076\uffec\100\uffec\101\uffec\103\uffec\106\uffec" +
    "\107\uffec\110\uffec\112\uffec\113\uffec\001\002\000\026\042" +
    "\013\045\025\065\026\070\015\071\023\076\020\101\024" +
    "\106\220\107\014\112\012\001\002\000\050\017\uffed\041" +
    "\uffed\042\uffed\045\uffed\065\uffed\070\uffed\071\uffed\073\uffed" +
    "\074\uffed\075\uffed\076\uffed\100\uffed\101\uffed\103\uffed\106" +
    "\uffed\107\uffed\110\uffed\112\uffed\113\uffed\001\002\000\026" +
    "\042\013\045\025\065\026\070\015\071\023\076\020\101" +
    "\024\107\014\110\224\112\012\001\002\000\026\005\044" +
    "\014\040\022\033\045\045\054\035\055\046\056\037\060" +
    "\034\061\036\062\032\001\002\000\106\017\uffea\021\055" +
    "\022\050\023\051\024\053\025\057\026\065\027\064\030" +
    "\054\031\067\032\061\033\066\034\060\035\063\036\056" +
    "\037\052\041\uffea\042\uffea\045\uffea\065\uffea\070\uffea\071" +
    "\uffea\073\uffea\074\uffea\075\uffea\076\uffea\100\uffea\101\uffea" +
    "\103\uffea\106\uffea\107\uffea\110\uffea\112\uffea\113\uffea\001" +
    "\002\000\026\005\044\014\040\022\033\045\045\054\035" +
    "\055\046\056\037\060\034\061\036\062\032\001\002\000" +
    "\106\017\uffeb\021\055\022\050\023\051\024\053\025\057" +
    "\026\065\027\064\030\054\031\067\032\061\033\066\034" +
    "\060\035\063\036\056\037\052\041\uffeb\042\uffeb\045\uffeb" +
    "\065\uffeb\070\uffeb\071\uffeb\073\uffeb\074\uffeb\075\uffeb\076" +
    "\uffeb\100\uffeb\101\uffeb\103\uffeb\106\uffeb\107\uffeb\110\uffeb" +
    "\112\uffeb\113\uffeb\001\002\000\006\015\030\043\227\001" +
    "\002\000\014\046\233\047\230\050\232\051\231\052\234" +
    "\001\002\000\004\044\251\001\002\000\004\044\246\001" +
    "\002\000\004\044\243\001\002\000\004\044\240\001\002" +
    "\000\004\044\235\001\002\000\026\005\044\014\040\022" +
    "\033\045\045\054\035\055\046\056\037\060\034\061\036" +
    "\062\032\001\002\000\042\004\237\021\055\022\050\023" +
    "\051\024\053\025\057\026\065\027\064\030\054\031\067" +
    "\032\061\033\066\034\060\035\063\036\056\037\052\001" +
    "\002\000\050\017\ufff3\041\ufff3\042\ufff3\045\ufff3\065\ufff3" +
    "\070\ufff3\071\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\100" +
    "\ufff3\101\ufff3\103\ufff3\106\ufff3\107\ufff3\110\ufff3\112\ufff3" +
    "\113\ufff3\001\002\000\026\005\044\014\040\022\033\045" +
    "\045\054\035\055\046\056\037\060\034\061\036\062\032" +
    "\001\002\000\042\004\242\021\055\022\050\023\051\024" +
    "\053\025\057\026\065\027\064\030\054\031\067\032\061" +
    "\033\066\034\060\035\063\036\056\037\052\001\002\000" +
    "\050\017\ufff7\041\ufff7\042\ufff7\045\ufff7\065\ufff7\070\ufff7" +
    "\071\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\100\ufff7\101" +
    "\ufff7\103\ufff7\106\ufff7\107\ufff7\110\ufff7\112\ufff7\113\ufff7" +
    "\001\002\000\026\005\044\014\040\022\033\045\045\054" +
    "\035\055\046\056\037\060\034\061\036\062\032\001\002" +
    "\000\042\004\245\021\055\022\050\023\051\024\053\025" +
    "\057\026\065\027\064\030\054\031\067\032\061\033\066" +
    "\034\060\035\063\036\056\037\052\001\002\000\050\017" +
    "\ufff5\041\ufff5\042\ufff5\045\ufff5\065\ufff5\070\ufff5\071\ufff5" +
    "\073\ufff5\074\ufff5\075\ufff5\076\ufff5\100\ufff5\101\ufff5\103" +
    "\ufff5\106\ufff5\107\ufff5\110\ufff5\112\ufff5\113\ufff5\001\002" +
    "\000\026\005\044\014\040\022\033\045\045\054\035\055" +
    "\046\056\037\060\034\061\036\062\032\001\002\000\042" +
    "\004\250\021\055\022\050\023\051\024\053\025\057\026" +
    "\065\027\064\030\054\031\067\032\061\033\066\034\060" +
    "\035\063\036\056\037\052\001\002\000\050\017\ufff4\041" +
    "\ufff4\042\ufff4\045\ufff4\065\ufff4\070\ufff4\071\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\100\ufff4\101\ufff4\103\ufff4\106" +
    "\ufff4\107\ufff4\110\ufff4\112\ufff4\113\ufff4\001\002\000\026" +
    "\005\044\014\040\022\033\045\045\054\035\055\046\056" +
    "\037\060\034\061\036\062\032\001\002\000\042\004\253" +
    "\021\055\022\050\023\051\024\053\025\057\026\065\027" +
    "\064\030\054\031\067\032\061\033\066\034\060\035\063" +
    "\036\056\037\052\001\002\000\050\017\ufff6\041\ufff6\042" +
    "\ufff6\045\ufff6\065\ufff6\070\ufff6\071\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\100\ufff6\101\ufff6\103\ufff6\106\ufff6\107" +
    "\ufff6\110\ufff6\112\ufff6\113\ufff6\001\002\000\030\003\022" +
    "\042\013\045\025\065\026\070\015\071\023\076\020\101" +
    "\024\107\014\112\012\114\256\001\002\000\026\042\013" +
    "\045\025\065\026\070\015\071\023\076\020\101\024\107" +
    "\014\112\012\113\305\001\002\000\004\005\257\001\002" +
    "\000\004\057\261\001\002\000\006\006\274\015\273\001" +
    "\002\000\010\046\264\047\262\050\263\001\002\000\006" +
    "\006\uffe0\015\uffe0\001\002\000\004\057\uffdf\001\002\000" +
    "\006\006\uffe1\015\uffe1\001\002\000\004\057\266\001\002" +
    "\000\004\051\267\001\002\000\004\057\uffde\001\002\000" +
    "\004\057\271\001\002\000\004\052\272\001\002\000\006" +
    "\006\uffdd\015\uffdd\001\002\000\004\057\277\001\002\000" +
    "\026\003\022\042\013\045\025\065\026\070\015\071\023" +
    "\076\020\101\024\107\014\112\012\001\002\000\026\042" +
    "\013\045\025\065\026\070\015\071\023\076\020\101\024" +
    "\107\014\112\012\113\276\001\002\000\050\017\uffe7\041" +
    "\uffe7\042\uffe7\045\uffe7\065\uffe7\070\uffe7\071\uffe7\073\uffe7" +
    "\074\uffe7\075\uffe7\076\uffe7\100\uffe7\101\uffe7\103\uffe7\106" +
    "\uffe7\107\uffe7\110\uffe7\112\uffe7\113\uffe7\001\002\000\014" +
    "\046\301\047\300\050\303\051\302\052\304\001\002\000" +
    "\006\006\uffe5\015\uffe5\001\002\000\006\006\uffe6\015\uffe6" +
    "\001\002\000\006\006\uffe3\015\uffe3\001\002\000\006\006" +
    "\uffe4\015\uffe4\001\002\000\006\006\uffe2\015\uffe2\001\002" +
    "\000\050\017\uffe8\041\uffe8\042\uffe8\045\uffe8\065\uffe8\070" +
    "\uffe8\071\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\100\uffe8" +
    "\101\uffe8\103\uffe8\106\uffe8\107\uffe8\110\uffe8\112\uffe8\113" +
    "\uffe8\001\002\000\006\002\ufffd\040\ufffd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\010\002\003\004\007\005\005\001\001\000" +
    "\002\001\001\000\004\005\305\001\001\000\002\001\001" +
    "\000\012\003\015\006\016\013\026\015\020\001\001\000" +
    "\004\005\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\225\001\001\000\012\003\220\006\016\013" +
    "\026\015\020\001\001\000\010\007\042\010\213\014\040" +
    "\001\001\000\010\006\134\013\026\015\020\001\001\000" +
    "\002\001\001\000\010\007\042\010\170\014\040\001\001" +
    "\000\002\001\001\000\010\006\167\013\026\015\020\001" +
    "\001\000\010\007\042\010\143\014\040\001\001\000\010" +
    "\007\042\010\122\014\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\042\010\041\014\040\001\001\000\002\001\001\000" +
    "\010\007\042\010\114\014\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\042\010\046\014\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\042\010\105\014\040\001\001\000\010\007\042\010" +
    "\104\014\040\001\001\000\010\007\042\010\103\014\040" +
    "\001\001\000\010\007\042\010\102\014\040\001\001\000" +
    "\010\007\042\010\101\014\040\001\001\000\010\007\042" +
    "\010\100\014\040\001\001\000\010\007\042\010\077\014" +
    "\040\001\001\000\010\007\042\010\076\014\040\001\001" +
    "\000\010\007\042\010\075\014\040\001\001\000\010\007" +
    "\042\010\074\014\040\001\001\000\002\001\001\000\010" +
    "\007\042\010\073\014\040\001\001\000\010\007\042\010" +
    "\072\014\040\001\001\000\010\007\042\010\071\014\040" +
    "\001\001\000\010\007\042\010\070\014\040\001\001\000" +
    "\010\007\042\010\067\014\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\042\010\117\014\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\042\010\124\014\040\001\001\000\002\001\001\000\010" +
    "\007\042\010\126\014\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\132\006\016\013\026\015\020" +
    "\001\001\000\002\001\001\000\010\006\134\013\026\015" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\042\010\136\014\040\001\001\000\002\001\001\000" +
    "\012\003\141\006\016\013\026\015\020\001\001\000\002" +
    "\001\001\000\010\006\134\013\026\015\020\001\001\000" +
    "\002\001\001\000\012\003\144\006\016\013\026\015\020" +
    "\001\001\000\012\006\134\011\151\013\026\015\020\001" +
    "\001\000\012\003\146\006\016\013\026\015\020\001\001" +
    "\000\010\006\134\013\026\015\020\001\001\000\002\001" +
    "\001\000\012\003\165\006\016\013\026\015\020\001\001" +
    "\000\002\001\001\000\010\007\042\010\153\014\040\001" +
    "\001\000\002\001\001\000\012\003\155\006\016\013\026" +
    "\015\020\001\001\000\010\006\134\013\026\015\020\001" +
    "\001\000\012\003\163\006\016\013\026\015\020\001\001" +
    "\000\010\007\042\010\160\014\040\001\001\000\002\001" +
    "\001\000\012\003\162\006\016\013\026\015\020\001\001" +
    "\000\010\006\134\013\026\015\020\001\001\000\010\006" +
    "\134\013\026\015\020\001\001\000\002\001\001\000\010" +
    "\006\134\013\026\015\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\173\001\001" +
    "\000\010\007\042\010\206\014\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\042\010\177\014\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\202\006\016\013\026\015\020\001\001" +
    "\000\010\006\134\013\026\015\020\001\001\000\012\003" +
    "\204\006\016\013\026\015\020\001\001\000\010\006\134" +
    "\013\026\015\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\211\006\016\013\026" +
    "\015\020\001\001\000\010\006\134\013\026\015\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\216" +
    "\006\016\013\026\015\020\001\001\000\002\001\001\000" +
    "\010\006\134\013\026\015\020\001\001\000\002\001\001" +
    "\000\010\006\134\013\026\015\020\001\001\000\010\007" +
    "\042\010\222\014\040\001\001\000\002\001\001\000\010" +
    "\007\042\010\224\014\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\042\010\235\014\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\042\010\240\014" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\042\010\243\014\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\042\010\246\014\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\042\010" +
    "\251\014\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\254\006\016\013\026\015\020\001\001\000" +
    "\010\006\134\013\026\015\020\001\001\000\002\001\001" +
    "\000\004\017\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\274\006\016\013" +
    "\026\015\020\001\001\000\010\006\134\013\026\015\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Interfaz.Principal.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public Arbol getArbol() {
        return arbol;
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se definió dentro del parser
                                                    parser.AST=a.getInstructions();
                                                    Nodo NODERAIZ = new Nodo("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= globales global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones Globales"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globales ::= global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globales ::= error global 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global ::= RINICIO instrucciones RFIN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Main(a.getInstructions()));
                                                    RESULT.addSon("inicio");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("fin");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("global",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instrucciones instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error instruccion 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= REVALUAR CORIZQ expresion_relacional CORDER PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Evaluar((Operacion)a.getIns()));
                                                    RESULT.addSon("EVALUAR");
                                                    RESULT.addSon("[");
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("]");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= RINGRESAR listaVariables RCOMO NUMDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("numero");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RINGRESAR listaVariables RCOMO FLOATDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("float");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= RINGRESAR listaVariables RCOMO CADDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CADENA, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("cadena");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= RINGRESAR listaVariables RCOMO BOOLDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.BOOLEAN, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("boolean");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RINGRESAR listaVariables RCOMO CARDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CARACTER, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("caracter");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= listaVariables FLECHAASIGN expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Asignacion"), new Asignacion(a, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RHACER instrucciones RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), d.getInstructions()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RHACER RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), new LinkedList<>() ));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RCON RINCREMENTAL expresion_relacional RHACER instrucciones RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), e.getInstructions(), (Operacion)d.getIns()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("con incremental");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(e);
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RCON RINCREMENTAL expresion_relacional RHACER RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), new LinkedList<>(), (Operacion)d.getIns()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("con incremental");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= RMIENTRAS expresion_relacional RHACER instrucciones RFIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(), b.getInstructions()));
                                                                                                    RESULT.addSon("mientras");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("finmientras");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= RMIENTRAS expresion_relacional RHACER RFIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(),  new LinkedList<>()));
                                                                                                    RESULT.addSon("mientras");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    
                                                                                                    RESULT.addSon("finmientras");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= RREPETIR instrucciones RHASTA_QUE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new DoWhile((Operacion)b.getIns(), a.getInstructions()));
                                                                                                    RESULT.addSon("repetir");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hasta_que");
                                                                                                    RESULT.addSon(b);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= RREPETIR RHASTA_QUE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(),  new LinkedList<>()));
                                                                                                    RESULT.addSon("repetir");
                                                                                                    
                                                                                                    RESULT.addSon("hasta_que");
                                                                                                    RESULT.addSon("a");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= condicion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= a;
                                                                                                    
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= RMETODO IDENTIFICADOR instrucciones RFIN_METODO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Metodo(a, b.getInstructions()));
                                                                                                    RESULT.addSon("metodo");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("fin_metodo");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= RMETODO IDENTIFICADOR RCON_PARAMETROS PARIZQ listaParametros PARDER instrucciones RFIN_METODO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Metodo(a, b.getInstructions(), c.getInstructions()));
                                                                                                    RESULT.addSon("metodo");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("con_parametros");
                                                                                                    RESULT.addSon("(");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(")");
                                                                                                    RESULT.addSon("fin_metodo");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaParametros ::= listaParametros COMA IDENTIFICADOR NUMDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaParametros ::= listaParametros COMA IDENTIFICADOR FLOATDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaParametros ::= listaParametros COMA IDENTIFICADOR CADDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.CADENA));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaParametros ::= listaParametros COMA IDENTIFICADOR BOOLDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.BOOLEAN));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaParametros ::= listaParametros COMA IDENTIFICADOR CARDATO 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("lista parametros"), l.getInstructions());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.CARACTER));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon(",");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaParametros ::= IDENTIFICADOR NUMDATO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaParametros ::= IDENTIFICADOR FLOATDATO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.NUMERO));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$0 ::= 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.CADENA));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$1 ::= 
            {
              Produccion RESULT =(Produccion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.BOOLEAN));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaParametros ::= IDENTIFICADOR CADDATO NT$0 IDENTIFICADOR BOOLDATO NT$1 IDENTIFICADOR CARDATO 
            {
              Produccion RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Produccion) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("parametro"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Parametro(a, Parametro.Tipo_dato.CARACTER));
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(b);
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= RSI expresion_relacional RENTONCES instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("SI");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon("entonces");
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= RSI expresion_relacional instrucciones RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                             RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");   
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= RSI expresion_relacional instrucciones else_ifs RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon(l);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= RSEGUN expresion_relacional RHACER cases RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion ::= RSEGUN expresion_relacional RHACER cases RELSE RENTONCES instrucciones RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions(),c.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("else");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cases ::= cases INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Casos"), l.getInstructions());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cases ::= INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Case"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaVariables ::= listaVariables COMA NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a +"," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listaVariables ::= NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // returns ::= RRETORNAR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Return"), new Return((Operacion)a.getIns()));
                                                                                                        RESULT.addSon("retornar");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("returns",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // returns ::= RRETORNAR condicion PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Return"), new Return(a.getIns()));
                                                                                                        RESULT.addSon("retornar");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(";");
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("returns",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // else_ifs ::= else_ifs ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("O_SI's"), l.getInstructions());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(), If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("ELSE");
                                                                                                        RESULT.addSon("IF");
                                                                                                        RESULT.addSon("(");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(")");
                                                                                                        RESULT.addSon("{");
                                                                                                        RESULT.addSon(b);
                                                                                                        RESULT.addSon("}");
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // else_ifs ::= ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("O_SI"), new LinkedList<>());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon("O_SI");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_relacional ::= expresion_relacional RMAYOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_relacional ::= expresion_relacional RMENOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_relacional ::= expresion_relacional RMAYORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_relacional ::= expresion_relacional RMENORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_relacional ::= expresion_relacional RIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.IGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_relacional ::= expresion_relacional RDIFERENTE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.DIFERENTE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("diferente");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_relacional ::= expresion_relacional RAND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.AND));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("and");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_relacional ::= expresion_relacional ROR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.OR));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("or");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_relacional ::= expresion_relacional RNOT expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOT));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("not");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_relacional ::= expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = a;
                                                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(a);                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion_relacional MAS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("+");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion_relacional MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion_relacional POR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("*");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion_relacional DIVIDIDO expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("/");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion_relacional RPOTENCIA expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("potencia");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion_relacional RMOD expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mod");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= PARIZQ expresion_relacional PARDER 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.PARENTESIS));
                                                    RESULT.addSon("(");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(")");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion_valor 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                 RESULT= a ;
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_valor ::= RVERDADERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                   RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_valor ::= RFALSO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                     RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_valor ::= NOMVARIABLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_valor ::= ENTERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_valor ::= DECIMAL 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));          
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_valor ::= STRING 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CADENA));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_valor ::= CHAR 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CARACTER));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_valor ::= COMSIMPLE DOLAR LLAVIZQ ENTERO LLAVDER COMSIMPLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion(d,Operacion.Tipo_operacion.CARACTER));
                                                    RESULT.addSon(a+b+c+d+e+f);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
