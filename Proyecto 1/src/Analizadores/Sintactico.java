
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Produccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.If;
import Estructuras.Instrucciones.While;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.Declaracion;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Switch;
import Estructuras.Instrucciones.Case;
import Estructuras.Instrucciones.Main;
import Estructuras.Instrucciones.For;
import Estructuras.Instrucciones.DoWhile;
import java.util.LinkedList;
import Estructuras.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\006\007\000\002\006\007\000\002\006\010\000\002" +
    "\006\011\000\002\006\011\000\002\006\011\000\002\006" +
    "\011\000\002\006\011\000\002\006\011\000\002\006\006" +
    "\000\002\006\007\000\002\006\012\000\002\006\013\000" +
    "\002\006\012\000\002\006\016\000\002\006\015\000\002" +
    "\006\007\000\002\006\006\000\002\006\006\000\002\006" +
    "\005\000\002\012\010\000\002\012\007\000\002\013\005" +
    "\000\002\013\003\000\002\011\007\000\002\011\006\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\007\004\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\006\003\005\040\007\001\002\000\004\002" +
    "\253\001\002\000\004\040\007\001\002\000\006\002\ufffe" +
    "\040\ufffe\001\002\000\024\003\020\042\012\045\023\064" +
    "\024\067\013\070\021\075\017\100\022\106\014\001\002" +
    "\000\006\002\000\040\007\001\002\000\006\002\uffff\040" +
    "\uffff\001\002\000\004\045\023\001\002\000\026\005\042" +
    "\014\036\022\031\045\043\054\033\055\044\056\035\057" +
    "\032\060\034\061\030\001\002\000\026\003\020\042\012" +
    "\045\023\064\024\067\013\070\021\075\017\100\022\106" +
    "\014\107\213\001\002\000\024\041\211\042\012\045\023" +
    "\064\024\067\013\070\021\075\017\100\022\106\014\001" +
    "\002\000\044\017\ufffa\041\ufffa\042\ufffa\045\ufffa\064\ufffa" +
    "\067\ufffa\070\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\077" +
    "\ufffa\100\ufffa\102\ufffa\105\ufffa\106\ufffa\107\ufffa\001\002" +
    "\000\026\005\042\014\036\022\031\045\043\054\033\055" +
    "\044\056\035\057\032\060\034\061\030\001\002\000\022" +
    "\042\012\045\023\064\024\067\013\070\021\075\017\100" +
    "\022\106\014\001\002\000\026\005\042\014\036\022\031" +
    "\045\043\054\033\055\044\056\035\057\032\060\034\061" +
    "\030\001\002\000\026\005\042\014\036\022\031\045\043" +
    "\054\033\055\044\056\035\057\032\060\034\061\030\001" +
    "\002\000\010\015\uffe1\043\uffe1\053\uffe1\001\002\000\004" +
    "\007\115\001\002\000\006\015\026\053\027\001\002\000" +
    "\004\045\114\001\002\000\026\005\042\014\036\022\031" +
    "\045\043\054\033\055\044\056\035\057\032\060\034\061" +
    "\030\001\002\000\126\003\uffc7\004\uffc7\006\uffc7\010\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\045" +
    "\uffc7\053\uffc7\064\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101" +
    "\uffc7\102\uffc7\103\uffc7\105\uffc7\106\uffc7\107\uffc7\001\002" +
    "\000\026\005\042\014\036\022\031\045\043\054\033\055" +
    "\044\056\035\057\032\060\034\061\030\001\002\000\126" +
    "\003\uffcb\004\uffcb\006\uffcb\010\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\041\uffcb\042\uffcb\045\uffcb\053\uffcb\064\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb" +
    "\105\uffcb\106\uffcb\107\uffcb\001\002\000\126\003\uffc8\004" +
    "\uffc8\006\uffc8\010\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\041\uffc8\042\uffc8\045\uffc8\053\uffc8\064\uffc8\067\uffc8\070" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\001\002\000\126\003\uffca\004\uffca\006\uffca" +
    "\010\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\041\uffca\042" +
    "\uffca\045\uffca\053\uffca\064\uffca\067\uffca\070\uffca\071\uffca" +
    "\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100" +
    "\uffca\101\uffca\102\uffca\103\uffca\105\uffca\106\uffca\107\uffca" +
    "\001\002\000\126\003\uffc6\004\uffc6\006\uffc6\010\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\041\uffc6\042\uffc6\045\uffc6" +
    "\053\uffc6\064\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\102\uffc6\103\uffc6\105\uffc6\106\uffc6\107\uffc6\001\002\000" +
    "\004\013\106\001\002\000\126\003\uffcc\004\uffcc\006\uffcc" +
    "\010\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042" +
    "\uffcc\045\uffcc\053\uffcc\064\uffcc\067\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100" +
    "\uffcc\101\uffcc\102\uffcc\103\uffcc\105\uffcc\106\uffcc\107\uffcc" +
    "\001\002\000\042\004\105\021\053\022\046\023\047\024" +
    "\051\025\055\026\063\027\062\030\052\031\065\032\056" +
    "\033\064\034\057\035\061\036\054\037\050\001\002\000" +
    "\126\003\uffd5\004\uffd5\006\uffd5\010\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\037\uffd5\041\uffd5\042\uffd5\045\uffd5\053\uffd5\064" +
    "\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103" +
    "\uffd5\105\uffd5\106\uffd5\107\uffd5\001\002\000\026\005\042" +
    "\014\036\022\031\045\043\054\033\055\044\056\035\057" +
    "\032\060\034\061\030\001\002\000\126\003\uffc9\004\uffc9" +
    "\006\uffc9\010\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041" +
    "\uffc9\042\uffc9\045\uffc9\053\uffc9\064\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\105\uffc9\106\uffc9" +
    "\107\uffc9\001\002\000\126\003\uffc5\004\uffc5\006\uffc5\010" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5" +
    "\045\uffc5\053\uffc5\064\uffc5\067\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\105\uffc5\106\uffc5\107\uffc5\001" +
    "\002\000\042\006\060\021\053\022\046\023\047\024\051" +
    "\025\055\026\063\027\062\030\052\031\065\032\056\033" +
    "\064\034\057\035\061\036\054\037\050\001\002\000\026" +
    "\005\042\014\036\022\031\045\043\054\033\055\044\056" +
    "\035\057\032\060\034\061\030\001\002\000\026\005\042" +
    "\014\036\022\031\045\043\054\033\055\044\056\035\057" +
    "\032\060\034\061\030\001\002\000\026\005\042\014\036" +
    "\022\031\045\043\054\033\055\044\056\035\057\032\060" +
    "\034\061\030\001\002\000\026\005\042\014\036\022\031" +
    "\045\043\054\033\055\044\056\035\057\032\060\034\061" +
    "\030\001\002\000\026\005\042\014\036\022\031\045\043" +
    "\054\033\055\044\056\035\057\032\060\034\061\030\001" +
    "\002\000\026\005\042\014\036\022\031\045\043\054\033" +
    "\055\044\056\035\057\032\060\034\061\030\001\002\000" +
    "\026\005\042\014\036\022\031\045\043\054\033\055\044" +
    "\056\035\057\032\060\034\061\030\001\002\000\026\005" +
    "\042\014\036\022\031\045\043\054\033\055\044\056\035" +
    "\057\032\060\034\061\030\001\002\000\026\005\042\014" +
    "\036\022\031\045\043\054\033\055\044\056\035\057\032" +
    "\060\034\061\030\001\002\000\026\005\042\014\036\022" +
    "\031\045\043\054\033\055\044\056\035\057\032\060\034" +
    "\061\030\001\002\000\126\003\uffcd\004\uffcd\006\uffcd\010" +
    "\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd" +
    "\045\uffcd\053\uffcd\064\uffcd\067\uffcd\070\uffcd\071\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd" +
    "\101\uffcd\102\uffcd\103\uffcd\105\uffcd\106\uffcd\107\uffcd\001" +
    "\002\000\026\005\042\014\036\022\031\045\043\054\033" +
    "\055\044\056\035\057\032\060\034\061\030\001\002\000" +
    "\026\005\042\014\036\022\031\045\043\054\033\055\044" +
    "\056\035\057\032\060\034\061\030\001\002\000\026\005" +
    "\042\014\036\022\031\045\043\054\033\055\044\056\035" +
    "\057\032\060\034\061\030\001\002\000\026\005\042\014" +
    "\036\022\031\045\043\054\033\055\044\056\035\057\032" +
    "\060\034\061\030\001\002\000\026\005\042\014\036\022" +
    "\031\045\043\054\033\055\044\056\035\057\032\060\034" +
    "\061\030\001\002\000\126\003\uffdc\004\uffdc\006\uffdc\010" +
    "\uffdc\017\uffdc\020\uffdc\021\053\022\046\023\047\024\051" +
    "\025\055\026\063\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc" +
    "\045\uffdc\053\uffdc\064\uffdc\067\uffdc\070\uffdc\071\uffdc\072" +
    "\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\102\uffdc\103\uffdc\105\uffdc\106\uffdc\107\uffdc\001" +
    "\002\000\126\003\uffda\004\uffda\006\uffda\010\uffda\017\uffda" +
    "\020\uffda\021\053\022\046\023\047\024\051\025\055\026" +
    "\063\027\062\030\052\031\065\032\056\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda\045\uffda\053" +
    "\uffda\064\uffda\067\uffda\070\uffda\071\uffda\072\uffda\073\uffda" +
    "\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102" +
    "\uffda\103\uffda\105\uffda\106\uffda\107\uffda\001\002\000\126" +
    "\003\uffce\004\uffce\006\uffce\010\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\055\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\041\uffce\042\uffce\045\uffce\053\uffce\064\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce" +
    "\105\uffce\106\uffce\107\uffce\001\002\000\126\003\uffde\004" +
    "\uffde\006\uffde\010\uffde\017\uffde\020\uffde\021\053\022\046" +
    "\023\047\024\051\025\055\026\063\027\uffde\030\uffde\031" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\041\uffde\042\uffde\045\uffde\053\uffde\064\uffde\067\uffde\070" +
    "\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\076\uffde" +
    "\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\105\uffde\106" +
    "\uffde\107\uffde\001\002\000\126\003\uffd7\004\uffd7\006\uffd7" +
    "\010\uffd7\017\uffd7\020\uffd7\021\053\022\046\023\047\024" +
    "\051\025\055\026\063\027\062\030\052\031\065\032\056" +
    "\033\064\034\057\035\uffd7\036\054\037\050\041\uffd7\042" +
    "\uffd7\045\uffd7\053\uffd7\064\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100" +
    "\uffd7\101\uffd7\102\uffd7\103\uffd7\105\uffd7\106\uffd7\107\uffd7" +
    "\001\002\000\126\003\uffd9\004\uffd9\006\uffd9\010\uffd9\017" +
    "\uffd9\020\uffd9\021\053\022\046\023\047\024\051\025\055" +
    "\026\063\027\062\030\052\031\065\032\056\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\045\uffd9" +
    "\053\uffd9\064\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073" +
    "\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9" +
    "\102\uffd9\103\uffd9\105\uffd9\106\uffd9\107\uffd9\001\002\000" +
    "\126\003\uffdb\004\uffdb\006\uffdb\010\uffdb\017\uffdb\020\uffdb" +
    "\021\053\022\046\023\047\024\051\025\055\026\063\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\041\uffdb\042\uffdb\045\uffdb\053\uffdb\064" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103" +
    "\uffdb\105\uffdb\106\uffdb\107\uffdb\001\002\000\126\003\uffcf" +
    "\004\uffcf\006\uffcf\010\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\055\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\041\uffcf\042\uffcf\045\uffcf\053\uffcf\064\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\105\uffcf" +
    "\106\uffcf\107\uffcf\001\002\000\126\003\uffd8\004\uffd8\006" +
    "\uffd8\010\uffd8\017\uffd8\020\uffd8\021\053\022\046\023\047" +
    "\024\051\025\055\026\063\027\062\030\052\031\065\032" +
    "\056\033\064\034\057\035\uffd8\036\uffd8\037\050\041\uffd8" +
    "\042\uffd8\045\uffd8\053\uffd8\064\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\105\uffd8\106\uffd8\107" +
    "\uffd8\001\002\000\126\003\uffd3\004\uffd3\006\uffd3\010\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\047\024\051\025" +
    "\055\026\063\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\045" +
    "\uffd3\053\uffd3\064\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101" +
    "\uffd3\102\uffd3\103\uffd3\105\uffd3\106\uffd3\107\uffd3\001\002" +
    "\000\126\003\uffdd\004\uffdd\006\uffdd\010\uffdd\017\uffdd\020" +
    "\uffdd\021\053\022\046\023\047\024\051\025\055\026\063" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\045\uffdd\053\uffdd" +
    "\064\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074" +
    "\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd" +
    "\103\uffdd\105\uffdd\106\uffdd\107\uffdd\001\002\000\126\003" +
    "\uffd0\004\uffd0\006\uffd0\010\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\055\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\037\uffd0\041\uffd0\042\uffd0\045\uffd0\053\uffd0\064\uffd0\067" +
    "\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\105" +
    "\uffd0\106\uffd0\107\uffd0\001\002\000\126\003\uffd6\004\uffd6" +
    "\006\uffd6\010\uffd6\017\uffd6\020\uffd6\021\053\022\046\023" +
    "\047\024\051\025\055\026\063\027\062\030\052\031\065" +
    "\032\056\033\064\034\057\035\uffd6\036\uffd6\037\050\041" +
    "\uffd6\042\uffd6\045\uffd6\053\uffd6\064\uffd6\067\uffd6\070\uffd6" +
    "\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077" +
    "\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\105\uffd6\106\uffd6" +
    "\107\uffd6\001\002\000\126\003\uffd1\004\uffd1\006\uffd1\010" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\055\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\042\uffd1" +
    "\045\uffd1\053\uffd1\064\uffd1\067\uffd1\070\uffd1\071\uffd1\072" +
    "\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1" +
    "\101\uffd1\102\uffd1\103\uffd1\105\uffd1\106\uffd1\107\uffd1\001" +
    "\002\000\126\003\uffd2\004\uffd2\006\uffd2\010\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\047\024\051\025\055\026" +
    "\063\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\045\uffd2\053" +
    "\uffd2\064\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102" +
    "\uffd2\103\uffd2\105\uffd2\106\uffd2\107\uffd2\001\002\000\044" +
    "\017\uffef\041\uffef\042\uffef\045\uffef\064\uffef\067\uffef\070" +
    "\uffef\072\uffef\073\uffef\074\uffef\075\uffef\077\uffef\100\uffef" +
    "\102\uffef\105\uffef\106\uffef\107\uffef\001\002\000\004\011" +
    "\107\001\002\000\004\054\110\001\002\000\004\012\111" +
    "\001\002\000\004\014\112\001\002\000\126\003\uffc4\004" +
    "\uffc4\006\uffc4\010\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\041\uffc4\042\uffc4\045\uffc4\053\uffc4\064\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\105\uffc4\106" +
    "\uffc4\107\uffc4\001\002\000\126\003\uffd4\004\uffd4\006\uffd4" +
    "\010\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042" +
    "\uffd4\045\uffd4\053\uffd4\064\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\105\uffd4\106\uffd4\107\uffd4" +
    "\001\002\000\010\015\uffe2\043\uffe2\053\uffe2\001\002\000" +
    "\026\005\042\014\036\022\031\045\043\054\033\055\044" +
    "\056\035\057\032\060\034\061\030\001\002\000\042\010" +
    "\117\021\053\022\046\023\047\024\051\025\055\026\063" +
    "\027\062\030\052\031\065\032\056\033\064\034\057\035" +
    "\061\036\054\037\050\001\002\000\004\004\120\001\002" +
    "\000\044\017\ufff8\041\ufff8\042\ufff8\045\ufff8\064\ufff8\067" +
    "\ufff8\070\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\077\ufff8" +
    "\100\ufff8\102\ufff8\105\ufff8\106\ufff8\107\ufff8\001\002\000" +
    "\042\021\053\022\046\023\047\024\051\025\055\026\063" +
    "\027\062\030\052\031\065\032\056\033\064\034\057\035" +
    "\061\036\054\037\050\053\122\001\002\000\026\005\042" +
    "\014\036\022\031\045\043\054\033\055\044\056\035\057" +
    "\032\060\034\061\030\001\002\000\042\021\053\022\046" +
    "\023\047\024\051\025\055\026\063\027\062\030\052\031" +
    "\065\032\056\033\064\034\057\035\061\036\054\037\050" +
    "\101\124\001\002\000\026\005\042\014\036\022\031\045" +
    "\043\054\033\055\044\056\035\057\032\060\034\061\030" +
    "\001\002\000\044\021\053\022\046\023\047\024\051\025" +
    "\055\026\063\027\062\030\052\031\065\032\056\033\064" +
    "\034\057\035\061\036\054\037\050\076\127\103\126\001" +
    "\002\000\004\104\134\001\002\000\026\003\020\042\012" +
    "\045\023\064\024\067\013\070\021\075\017\100\022\102" +
    "\130\106\014\001\002\000\044\017\uffeb\041\uffeb\042\uffeb" +
    "\045\uffeb\064\uffeb\067\uffeb\070\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\077\uffeb\100\uffeb\102\uffeb\105\uffeb\106\uffeb" +
    "\107\uffeb\001\002\000\024\042\012\045\023\064\024\067" +
    "\013\070\021\075\017\100\022\102\132\106\014\001\002" +
    "\000\044\017\uffec\041\uffec\042\uffec\045\uffec\064\uffec\067" +
    "\uffec\070\uffec\072\uffec\073\uffec\074\uffec\075\uffec\077\uffec" +
    "\100\uffec\102\uffec\105\uffec\106\uffec\107\uffec\001\002\000" +
    "\044\017\ufffb\041\ufffb\042\ufffb\045\ufffb\064\ufffb\067\ufffb" +
    "\070\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\077\ufffb\100" +
    "\ufffb\102\ufffb\105\ufffb\106\ufffb\107\ufffb\001\002\000\026" +
    "\005\042\014\036\022\031\045\043\054\033\055\044\056" +
    "\035\057\032\060\034\061\030\001\002\000\042\021\053" +
    "\022\046\023\047\024\051\025\055\026\063\027\062\030" +
    "\052\031\065\032\056\033\064\034\057\035\061\036\054" +
    "\037\050\076\136\001\002\000\026\003\020\042\012\045" +
    "\023\064\024\067\013\070\021\075\017\100\022\102\137" +
    "\106\014\001\002\000\044\017\uffe9\041\uffe9\042\uffe9\045" +
    "\uffe9\064\uffe9\067\uffe9\070\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\075\uffe9\077\uffe9\100\uffe9\102\uffe9\105\uffe9\106\uffe9\107" +
    "\uffe9\001\002\000\024\042\012\045\023\064\024\067\013" +
    "\070\021\075\017\100\022\102\141\106\014\001\002\000" +
    "\044\017\uffea\041\uffea\042\uffea\045\uffea\064\uffea\067\uffea" +
    "\070\uffea\072\uffea\073\uffea\074\uffea\075\uffea\077\uffea\100" +
    "\uffea\102\uffea\105\uffea\106\uffea\107\uffea\001\002\000\064" +
    "\003\020\021\053\022\046\023\047\024\051\025\055\026" +
    "\063\027\062\030\052\031\065\032\056\033\064\034\057" +
    "\035\061\036\054\037\050\042\012\045\023\064\024\067" +
    "\013\070\021\071\144\075\017\100\022\106\014\001\002" +
    "\000\026\042\012\045\023\064\024\067\013\070\021\073" +
    "\147\074\151\075\017\100\022\106\014\001\002\000\024" +
    "\003\020\042\012\045\023\064\024\067\013\070\021\075" +
    "\017\100\022\106\014\001\002\000\024\042\012\045\023" +
    "\064\024\067\013\070\021\072\146\075\017\100\022\106" +
    "\014\001\002\000\044\017\ufff7\041\ufff7\042\ufff7\045\ufff7" +
    "\064\ufff7\067\ufff7\070\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\077\ufff7\100\ufff7\102\ufff7\105\ufff7\106\ufff7\107\ufff7" +
    "\001\002\000\024\003\020\042\012\045\023\064\024\067" +
    "\013\070\021\075\017\100\022\106\014\001\002\000\006" +
    "\073\155\074\156\001\002\000\026\005\042\014\036\022" +
    "\031\045\043\054\033\055\044\056\035\057\032\060\034" +
    "\061\030\001\002\000\042\021\053\022\046\023\047\024" +
    "\051\025\055\026\063\027\062\030\052\031\065\032\056" +
    "\033\064\034\057\035\061\036\054\037\050\071\153\001" +
    "\002\000\024\003\020\042\012\045\023\064\024\067\013" +
    "\070\021\075\017\100\022\106\014\001\002\000\026\042" +
    "\012\045\023\064\024\067\013\070\021\073\uffdf\074\uffdf" +
    "\075\017\100\022\106\014\001\002\000\024\003\020\042" +
    "\012\045\023\064\024\067\013\070\021\075\017\100\022" +
    "\106\014\001\002\000\026\005\042\014\036\022\031\045" +
    "\043\054\033\055\044\056\035\057\032\060\034\061\030" +
    "\001\002\000\042\021\053\022\046\023\047\024\051\025" +
    "\055\026\063\027\062\030\052\031\065\032\056\033\064" +
    "\034\057\035\061\036\054\037\050\071\160\001\002\000" +
    "\024\003\020\042\012\045\023\064\024\067\013\070\021" +
    "\075\017\100\022\106\014\001\002\000\026\042\012\045" +
    "\023\064\024\067\013\070\021\073\uffe0\074\uffe0\075\017" +
    "\100\022\106\014\001\002\000\024\042\012\045\023\064" +
    "\024\067\013\070\021\072\163\075\017\100\022\106\014" +
    "\001\002\000\044\017\ufff5\041\ufff5\042\ufff5\045\ufff5\064" +
    "\ufff5\067\ufff5\070\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5" +
    "\077\ufff5\100\ufff5\102\ufff5\105\ufff5\106\ufff5\107\ufff5\001" +
    "\002\000\024\042\012\045\023\064\024\067\013\070\021" +
    "\072\165\075\017\100\022\106\014\001\002\000\044\017" +
    "\ufff6\041\ufff6\042\ufff6\045\ufff6\064\ufff6\067\ufff6\070\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\077\ufff6\100\ufff6\102" +
    "\ufff6\105\ufff6\106\ufff6\107\ufff6\001\002\000\044\017\ufff9" +
    "\041\ufff9\042\ufff9\045\ufff9\064\ufff9\067\ufff9\070\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\077\ufff9\100\ufff9\102\ufff9" +
    "\105\ufff9\106\ufff9\107\ufff9\001\002\000\042\021\053\022" +
    "\046\023\047\024\051\025\055\026\063\027\062\030\052" +
    "\031\065\032\056\033\064\034\057\035\061\036\054\037" +
    "\050\076\170\001\002\000\004\017\171\001\002\000\026" +
    "\005\042\014\036\022\031\045\043\054\033\055\044\056" +
    "\035\057\032\060\034\061\030\001\002\000\010\017\174" +
    "\073\173\077\175\001\002\000\004\071\202\001\002\000" +
    "\026\005\042\014\036\022\031\045\043\054\033\055\044" +
    "\056\035\057\032\060\034\061\030\001\002\000\044\017" +
    "\uffee\041\uffee\042\uffee\045\uffee\064\uffee\067\uffee\070\uffee" +
    "\072\uffee\073\uffee\074\uffee\075\uffee\077\uffee\100\uffee\102" +
    "\uffee\105\uffee\106\uffee\107\uffee\001\002\000\042\020\177" +
    "\021\053\022\046\023\047\024\051\025\055\026\063\027" +
    "\062\030\052\031\065\032\056\033\064\034\057\035\061" +
    "\036\054\037\050\001\002\000\004\071\200\001\002\000" +
    "\024\003\020\042\012\045\023\064\024\067\013\070\021" +
    "\075\017\100\022\106\014\001\002\000\030\017\uffe4\042" +
    "\012\045\023\064\024\067\013\070\021\073\uffe4\075\017" +
    "\077\uffe4\100\022\106\014\001\002\000\024\003\020\042" +
    "\012\045\023\064\024\067\013\070\021\075\017\100\022" +
    "\106\014\001\002\000\024\042\012\045\023\064\024\067" +
    "\013\070\021\075\017\077\204\100\022\106\014\001\002" +
    "\000\044\017\uffed\041\uffed\042\uffed\045\uffed\064\uffed\067" +
    "\uffed\070\uffed\072\uffed\073\uffed\074\uffed\075\uffed\077\uffed" +
    "\100\uffed\102\uffed\105\uffed\106\uffed\107\uffed\001\002\000" +
    "\042\020\206\021\053\022\046\023\047\024\051\025\055" +
    "\026\063\027\062\030\052\031\065\032\056\033\064\034" +
    "\057\035\061\036\054\037\050\001\002\000\004\071\207" +
    "\001\002\000\024\003\020\042\012\045\023\064\024\067" +
    "\013\070\021\075\017\100\022\106\014\001\002\000\030" +
    "\017\uffe3\042\012\045\023\064\024\067\013\070\021\073" +
    "\uffe3\075\017\077\uffe3\100\022\106\014\001\002\000\006" +
    "\002\ufffc\040\ufffc\001\002\000\024\042\012\045\023\064" +
    "\024\067\013\070\021\075\017\100\022\106\014\107\215" +
    "\001\002\000\026\005\042\014\036\022\031\045\043\054" +
    "\033\055\044\056\035\057\032\060\034\061\030\001\002" +
    "\000\102\017\uffe5\021\053\022\046\023\047\024\051\025" +
    "\055\026\063\027\062\030\052\031\065\032\056\033\064" +
    "\034\057\035\061\036\054\037\050\041\uffe5\042\uffe5\045" +
    "\uffe5\064\uffe5\067\uffe5\070\uffe5\072\uffe5\073\uffe5\074\uffe5" +
    "\075\uffe5\077\uffe5\100\uffe5\102\uffe5\105\uffe5\106\uffe5\107" +
    "\uffe5\001\002\000\026\005\042\014\036\022\031\045\043" +
    "\054\033\055\044\056\035\057\032\060\034\061\030\001" +
    "\002\000\102\017\uffe6\021\053\022\046\023\047\024\051" +
    "\025\055\026\063\027\062\030\052\031\065\032\056\033" +
    "\064\034\057\035\061\036\054\037\050\041\uffe6\042\uffe6" +
    "\045\uffe6\064\uffe6\067\uffe6\070\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\077\uffe6\100\uffe6\102\uffe6\105\uffe6\106\uffe6" +
    "\107\uffe6\001\002\000\042\021\053\022\046\023\047\024" +
    "\051\025\055\026\063\027\062\030\052\031\065\032\056" +
    "\033\064\034\057\035\061\036\054\037\050\076\220\001" +
    "\002\000\026\003\020\042\012\045\023\064\024\067\013" +
    "\070\021\075\017\100\022\105\221\106\014\001\002\000" +
    "\044\017\uffe7\041\uffe7\042\uffe7\045\uffe7\064\uffe7\067\uffe7" +
    "\070\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\077\uffe7\100" +
    "\uffe7\102\uffe7\105\uffe7\106\uffe7\107\uffe7\001\002\000\024" +
    "\042\012\045\023\064\024\067\013\070\021\075\017\100" +
    "\022\105\223\106\014\001\002\000\044\017\uffe8\041\uffe8" +
    "\042\uffe8\045\uffe8\064\uffe8\067\uffe8\070\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\077\uffe8\100\uffe8\102\uffe8\105\uffe8" +
    "\106\uffe8\107\uffe8\001\002\000\006\015\026\043\225\001" +
    "\002\000\014\046\227\047\226\050\231\051\230\052\232" +
    "\001\002\000\004\044\247\001\002\000\004\044\244\001" +
    "\002\000\004\044\241\001\002\000\004\044\236\001\002" +
    "\000\004\044\233\001\002\000\026\005\042\014\036\022" +
    "\031\045\043\054\033\055\044\056\035\057\032\060\034" +
    "\061\030\001\002\000\042\004\235\021\053\022\046\023" +
    "\047\024\051\025\055\026\063\027\062\030\052\031\065" +
    "\032\056\033\064\034\057\035\061\036\054\037\050\001" +
    "\002\000\044\017\ufff0\041\ufff0\042\ufff0\045\ufff0\064\ufff0" +
    "\067\ufff0\070\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\077" +
    "\ufff0\100\ufff0\102\ufff0\105\ufff0\106\ufff0\107\ufff0\001\002" +
    "\000\026\005\042\014\036\022\031\045\043\054\033\055" +
    "\044\056\035\057\032\060\034\061\030\001\002\000\042" +
    "\004\240\021\053\022\046\023\047\024\051\025\055\026" +
    "\063\027\062\030\052\031\065\032\056\033\064\034\057" +
    "\035\061\036\054\037\050\001\002\000\044\017\ufff2\041" +
    "\ufff2\042\ufff2\045\ufff2\064\ufff2\067\ufff2\070\ufff2\072\ufff2" +
    "\073\ufff2\074\ufff2\075\ufff2\077\ufff2\100\ufff2\102\ufff2\105" +
    "\ufff2\106\ufff2\107\ufff2\001\002\000\026\005\042\014\036" +
    "\022\031\045\043\054\033\055\044\056\035\057\032\060" +
    "\034\061\030\001\002\000\042\004\243\021\053\022\046" +
    "\023\047\024\051\025\055\026\063\027\062\030\052\031" +
    "\065\032\056\033\064\034\057\035\061\036\054\037\050" +
    "\001\002\000\044\017\ufff1\041\ufff1\042\ufff1\045\ufff1\064" +
    "\ufff1\067\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\077\ufff1\100\ufff1\102\ufff1\105\ufff1\106\ufff1\107\ufff1\001" +
    "\002\000\026\005\042\014\036\022\031\045\043\054\033" +
    "\055\044\056\035\057\032\060\034\061\030\001\002\000" +
    "\042\004\246\021\053\022\046\023\047\024\051\025\055" +
    "\026\063\027\062\030\052\031\065\032\056\033\064\034" +
    "\057\035\061\036\054\037\050\001\002\000\044\017\ufff4" +
    "\041\ufff4\042\ufff4\045\ufff4\064\ufff4\067\ufff4\070\ufff4\072" +
    "\ufff4\073\ufff4\074\ufff4\075\ufff4\077\ufff4\100\ufff4\102\ufff4" +
    "\105\ufff4\106\ufff4\107\ufff4\001\002\000\026\005\042\014" +
    "\036\022\031\045\043\054\033\055\044\056\035\057\032" +
    "\060\034\061\030\001\002\000\042\004\251\021\053\022" +
    "\046\023\047\024\051\025\055\026\063\027\062\030\052" +
    "\031\065\032\056\033\064\034\057\035\061\036\054\037" +
    "\050\001\002\000\044\017\ufff3\041\ufff3\042\ufff3\045\ufff3" +
    "\064\ufff3\067\ufff3\070\ufff3\072\ufff3\073\ufff3\074\ufff3\075" +
    "\ufff3\077\ufff3\100\ufff3\102\ufff3\105\ufff3\106\ufff3\107\ufff3" +
    "\001\002\000\006\002\ufffd\040\ufffd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\010\002\003\004\007\005\005\001\001\000" +
    "\002\001\001\000\004\005\251\001\001\000\002\001\001" +
    "\000\010\003\014\006\015\013\024\001\001\000\004\005" +
    "\010\001\001\000\002\001\001\000\004\013\223\001\001" +
    "\000\010\007\040\010\216\014\036\001\001\000\010\003" +
    "\211\006\015\013\024\001\001\000\006\006\132\013\024" +
    "\001\001\000\002\001\001\000\010\007\040\010\166\014" +
    "\036\001\001\000\006\006\165\013\024\001\001\000\010" +
    "\007\040\010\141\014\036\001\001\000\010\007\040\010" +
    "\120\014\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\040\010" +
    "\037\014\036\001\001\000\002\001\001\000\010\007\040" +
    "\010\112\014\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\040\010\044\014\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\040\010" +
    "\103\014\036\001\001\000\010\007\040\010\102\014\036" +
    "\001\001\000\010\007\040\010\101\014\036\001\001\000" +
    "\010\007\040\010\100\014\036\001\001\000\010\007\040" +
    "\010\077\014\036\001\001\000\010\007\040\010\076\014" +
    "\036\001\001\000\010\007\040\010\075\014\036\001\001" +
    "\000\010\007\040\010\074\014\036\001\001\000\010\007" +
    "\040\010\073\014\036\001\001\000\010\007\040\010\072" +
    "\014\036\001\001\000\002\001\001\000\010\007\040\010" +
    "\071\014\036\001\001\000\010\007\040\010\070\014\036" +
    "\001\001\000\010\007\040\010\067\014\036\001\001\000" +
    "\010\007\040\010\066\014\036\001\001\000\010\007\040" +
    "\010\065\014\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\040\010\115" +
    "\014\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\040\010\122" +
    "\014\036\001\001\000\002\001\001\000\010\007\040\010" +
    "\124\014\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\130\006\015\013\024\001\001\000\002\001" +
    "\001\000\006\006\132\013\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\040\010\134\014\036\001" +
    "\001\000\002\001\001\000\010\003\137\006\015\013\024" +
    "\001\001\000\002\001\001\000\006\006\132\013\024\001" +
    "\001\000\002\001\001\000\010\003\142\006\015\013\024" +
    "\001\001\000\010\006\132\011\147\013\024\001\001\000" +
    "\010\003\144\006\015\013\024\001\001\000\006\006\132" +
    "\013\024\001\001\000\002\001\001\000\010\003\163\006" +
    "\015\013\024\001\001\000\002\001\001\000\010\007\040" +
    "\010\151\014\036\001\001\000\002\001\001\000\010\003" +
    "\153\006\015\013\024\001\001\000\006\006\132\013\024" +
    "\001\001\000\010\003\161\006\015\013\024\001\001\000" +
    "\010\007\040\010\156\014\036\001\001\000\002\001\001" +
    "\000\010\003\160\006\015\013\024\001\001\000\006\006" +
    "\132\013\024\001\001\000\006\006\132\013\024\001\001" +
    "\000\002\001\001\000\006\006\132\013\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\171\001\001\000\010\007\040\010\204\014\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\040" +
    "\010\175\014\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\200\006\015\013\024" +
    "\001\001\000\006\006\132\013\024\001\001\000\010\003" +
    "\202\006\015\013\024\001\001\000\006\006\132\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\207\006\015\013\024\001\001\000\006" +
    "\006\132\013\024\001\001\000\002\001\001\000\006\006" +
    "\132\013\024\001\001\000\010\007\040\010\213\014\036" +
    "\001\001\000\002\001\001\000\010\007\040\010\215\014" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\221\006\015\013\024\001\001\000\002\001\001\000" +
    "\006\006\132\013\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\040\010\233\014\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\040\010\236\014\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\040\010\241\014\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\040\010\244\014\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\040\010\247" +
    "\014\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Variable en la que se almacena el arbol de sintaxis abstracta que se 
     * genera luego del analisis sintáctico.
     */
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        Interfaz.Principal.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public Arbol getArbol() {
        return arbol;
    }
    public LinkedList<Instruccion> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= globales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    //se guarda el AST, que es la lista principal de instrucciones en la variable
                                                    //AST que se definió dentro del parser
                                                    parser.AST=a.getInstructions();
                                                    Nodo NODERAIZ = new Nodo("INIT"); NODERAIZ.addSon(a.getNode());
                                                    parser.arbol=new Arbol(NODERAIZ);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globales ::= globales global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones Globales"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globales ::= global 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globales ::= error global 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("globales",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // global ::= RINICIO instrucciones RFIN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Main(a.getInstructions()));
                                                    RESULT.addSon("inicio");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("fin");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("global",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= instrucciones instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), a.getInstructions());
                                                    RESULT.addIns(b.getIns());
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instruccion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Instrucciones"), new LinkedList<>());
                                                    RESULT.addIns(a.getIns());
                                                    RESULT.addSon(a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error instruccion 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= REVALUAR CORIZQ expresion_relacional CORDER PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT=new Produccion(new Nodo("Instruccion"), new Evaluar((Operacion)a.getIns()));
                                                    RESULT.addSon("EVALUAR");
                                                    RESULT.addSon("[");
                                                    RESULT.addSon(a); 
                                                    RESULT.addSon("]");
                                                    RESULT.addSon(";");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= RSI expresion_relacional RENTONCES instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("SI");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon("entonces");
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RSI expresion_relacional instrucciones RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                             RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");   
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= RSI expresion_relacional instrucciones else_ifs RELSE instrucciones RFIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                                                                RESULT=new Produccion(new Nodo("Instruccion"), new If((Operacion)a.getIns(),b.getInstructions(),l.getInstructions(),c.getInstructions(),If.Tipo_if.IF));
                                                                                                                                RESULT.addSon("si");
                                                                                                                                RESULT.addSon(a);
                                                                                                                                RESULT.addSon(b);
                                                                                                                                RESULT.addSon(l);
                                                                                                                                RESULT.addSon("de_lo_contrario");
                                                                                                                                RESULT.addSon(c);
                                                                                                                                RESULT.addSon("fin_si");
                                                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= RINGRESAR listaVariables RCOMO NUMDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("numero");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= RINGRESAR listaVariables RCOMO FLOATDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.NUMERO, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("float");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= RINGRESAR listaVariables RCOMO CADDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CADENA, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("cadena");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= RINGRESAR listaVariables RCOMO BOOLDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.BOOLEAN, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("boolean");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= RINGRESAR listaVariables RCOMO CARDATO RCONVALOR expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Declaracion"), new Declaracion(a, Declaracion.Tipo_dato.CARACTER, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon("INGRESAR");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("como"); 
                                                                                                    RESULT.addSon("caracter");
                                                                                                    RESULT.addSon("con_valor");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= listaVariables FLECHAASIGN expresion_relacional PTCOMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Asignacion"), new Asignacion(a, (Operacion)b.getIns()));
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon(";");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= RSEGUN expresion_relacional RHACER cases RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= RSEGUN expresion_relacional RHACER cases RELSE RENTONCES instrucciones RFIN_SEGUN 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new Switch((Operacion)a.getIns(),b.getInstructions(),c.getInstructions()));
                                                                                                    RESULT.addSon("segun");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("else");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("fin_segun");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RHACER instrucciones RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), d.getInstructions()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RHACER RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), new LinkedList<>() ));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RCON RINCREMENTAL expresion_relacional RHACER instrucciones RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), e.getInstructions(), (Operacion)d.getIns()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("con incremental");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(e);
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= RPARA expresion_relacional FLECHAASIGN expresion_relacional RHASTA expresion_relacional RCON RINCREMENTAL expresion_relacional RHACER RFIN_PARA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion d = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new For((Operacion)a.getIns(),(Operacion)b.getIns(), (Operacion)c.getIns(), new LinkedList<>(), (Operacion)d.getIns()));
                                                                                                    RESULT.addSon("para");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("->");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("hasta");
                                                                                                    RESULT.addSon(c);
                                                                                                    RESULT.addSon("con incremental");
                                                                                                    RESULT.addSon(d);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon("fin_para");
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= RMIENTRAS expresion_relacional RHACER instrucciones RFIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(), b.getInstructions()));
                                                                                                    RESULT.addSon("mientras");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    RESULT.addSon(b);
                                                                                                    RESULT.addSon("finmientras");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= RMIENTRAS expresion_relacional RHACER RFIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(),  new LinkedList<>()));
                                                                                                    RESULT.addSon("mientras");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hacer");
                                                                                                    
                                                                                                    RESULT.addSon("finmientras");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= RREPETIR instrucciones RHASTA_QUE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new DoWhile((Operacion)b.getIns(), a.getInstructions()));
                                                                                                    RESULT.addSon("repetir");
                                                                                                    RESULT.addSon(a);
                                                                                                    RESULT.addSon("hasta_que");
                                                                                                    RESULT.addSon(b);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= RREPETIR RHASTA_QUE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT= new Produccion(new Nodo("Instruccion"), new While((Operacion)a.getIns(),  new LinkedList<>()));
                                                                                                    RESULT.addSon("repetir");
                                                                                                    
                                                                                                    RESULT.addSon("hasta_que");
                                                                                                    RESULT.addSon("a");
                                                                                                    
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cases ::= cases INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                    RESULT=new Produccion(new Nodo("Casos"), l.getInstructions());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cases ::= INTERROGIZQ expresion_relacional INTERROGDER RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("Case"), new LinkedList<>());
                                                                                                        RESULT.addIns(new Case((Operacion)a.getIns(), b.getInstructions()));
                                                                                                        RESULT.addSon("¿");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("?");
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaVariables ::= listaVariables COMA NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a +"," + b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaVariables ::= NOMVARIABLE 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaVariables",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // else_ifs ::= else_ifs ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                                                                                                
                                                                                                        RESULT=new Produccion(new Nodo("O_SI's"), l.getInstructions());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(), If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon(l);
                                                                                                        RESULT.addSon("ELSE");
                                                                                                        RESULT.addSon("IF");
                                                                                                        RESULT.addSon("(");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon(")");
                                                                                                        RESULT.addSon("{");
                                                                                                        RESULT.addSon(b);
                                                                                                        RESULT.addSon("}");
                                                                                                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // else_ifs ::= ROSI expresion_relacional RENTONCES instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                                                                                                        RESULT=new Produccion(new Nodo("O_SI"), new LinkedList<>());
                                                                                                        RESULT.addIns(new If((Operacion)a.getIns(), b.getInstructions(),If.Tipo_if.ELIF));
                                                                                                        RESULT.addSon("O_SI");
                                                                                                        RESULT.addSon(a);
                                                                                                        RESULT.addSon("entonces");
                                                                                                        RESULT.addSon(b);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_ifs",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_relacional ::= expresion_relacional RMAYOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion_relacional ::= expresion_relacional RMENOR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion_relacional ::= expresion_relacional RMAYORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MAYOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mayor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_relacional ::= expresion_relacional RMENORIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.MENOR_IGUAL_QUE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("menor_o_igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_relacional ::= expresion_relacional RIGUAL expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.IGUAL));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("igual");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_relacional ::= expresion_relacional RDIFERENTE expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.DIFERENTE));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("diferente");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion_relacional ::= expresion_relacional RAND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.AND));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("and");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion_relacional ::= expresion_relacional ROR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Logica"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.OR));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("or");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion_relacional ::= expresion_relacional RNOT expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion_Relacional"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(), Operacion.Tipo_operacion.NOT));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("not");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion_relacional ::= expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = a;
                                                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.NEGATIVO));
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(a);                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion_relacional MAS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.SUMA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("+");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion_relacional MENOS expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.RESTA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("-");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion_relacional POR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MULTIPLICACION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("*");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion_relacional DIVIDIDO expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.DIVISION));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("/");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion_relacional RPOTENCIA expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.POTENCIA));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("potencia");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion_relacional RMOD expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),(Operacion)b.getIns(),Operacion.Tipo_operacion.MODULO));
                                                    RESULT.addSon(a);
                                                    RESULT.addSon("mod");
                                                    RESULT.addSon(b);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= PARIZQ expresion_relacional PARDER 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion((Operacion)a.getIns(),Operacion.Tipo_operacion.PARENTESIS));
                                                    RESULT.addSon("(");
                                                    RESULT.addSon(a);
                                                    RESULT.addSon(")");
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion_valor 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                 RESULT= a ;
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_valor ::= RVERDADERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                   RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_valor ::= RFALSO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                     RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.BOOLEAN));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_valor ::= NOMVARIABLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.VARIABLE));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_valor ::= ENTERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_valor ::= DECIMAL 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.NUMERO));          
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_valor ::= STRING 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CADENA));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_valor ::= CHAR 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo(null, a), new Operacion(a,Operacion.Tipo_operacion.CARACTER));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_valor ::= COMSIMPLE DOLAR LLAVIZQ ENTERO LLAVDER COMSIMPLE 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT=new Produccion(new Nodo("Expresion"), new Operacion(d,Operacion.Tipo_operacion.CARACTER));
                                                    RESULT.addSon(a+b+c+d+e+f);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_valor",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
